<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ToniBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-23T13:33:08.219Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ToniXWD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lab1: MapReduce</title>
    <link href="http://example.com/2023/12/23/MIT6.8540/Lab1_MapReduce/"/>
    <id>http://example.com/2023/12/23/MIT6.8540/Lab1_MapReduce/</id>
    <published>2023-12-23T05:25:18.000Z</published>
    <updated>2023-12-23T13:33:08.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-实验介绍"><a href="#1-实验介绍" class="headerlink" title="1 实验介绍"></a>1 实验介绍</h1><p>本次实验是实现一个简易版本的<code>MapReduce</code>编程框架,官方文档在这里:<a href="https://pdos.csail.mit.edu/6.824/labs/lab-mr.html">lab1文档</a>, 强烈建议先阅读<code>MapReduce</code>的<a href="https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf">论文</a>, 难度主要体现在设计上, 实际的代码实现倒是相对简单, 这也得益于<code>go</code>的语言特性, 比<code>CMU15445</code>使用Cpp写代码方便多了。实验需要实现的是<code>Coordinator</code>和<code>Worker</code>的设计, 具体实现细节十分自由(<del>无从下手</del>)</p><p>我的代码实现点这里： <a href="https://github.com/ToniXWD/MIT6.8540/tree/lab1">https://github.com/ToniXWD/MIT6.8540/tree/lab1</a></p><h1 id="2-既有框架解读"><a href="#2-既有框架解读" class="headerlink" title="2 既有框架解读"></a>2 既有框架解读</h1><p>解读现有的框架设计是第一步。</p><h2 id="2-1-代码解读"><a href="#2-1-代码解读" class="headerlink" title="2.1 代码解读"></a>2.1 代码解读</h2><ol><li>阅读<code>src/main/mrcoordinator.go</code>可知：<br> 服务进程通过<code>MakeCoordinator</code>启动了一个<code>Coordinator</code> c, <code>c.server()</code>中启用了一个协程用于接受<code>RPC</code>调用:<code>go http.Serve(l, nil)</code>, 需要注意的是, 在 Go 的 <code>net/http</code> 包中, 使用 <code>http.Serve(l, nil)</code> 启动 <code>HTTP</code> 服务器以侦听和处理请求时，服务器会为每个进来的请求自动启动一个新的协程。这意味着每个 RPC 调用都是在其自己的独立协程中被处理的，允许并发处理多个请求。因此, 我们的设计可能需要使用锁等同步原语实现共享资源的保护, 同时<code>Coordinator</code>不会主动与<code>Worker</code>通信(除非自己额外实现), 只能通过<code>Worker</code>的<code>RPC</code>通信来完成任务。同时， 当所有任务完成时， <code>Done</code>方法将会返回<code>false</code>, 从而将<code>Coordinator</code>关闭。</li><li>阅读<code>src/main/mrworker.go</code><br>可以得知，<code>mrworker.go</code>仅仅通过<code>Worker</code>函数来运行, 因此<code>Worker</code>函数需要完成请求任务、执行任务、报告任务执行状态等多种任务。因此可以猜测，Worker需要再这个函数里不断地轮训<code>Coordinator</code>，根据<code>Coordinator</code>的不同回复驱使当前<code>Worker</code>完成各种任务。</li></ol><h2 id="2-2-任务误区解读"><a href="#2-2-任务误区解读" class="headerlink" title="2.2 任务误区解读"></a>2.2 任务误区解读</h2><ol><li><p><code>Map</code>、<code>Reduce</code>任务、<code>Coordinator</code>和<code>Worker</code>的关系如何?<br>这些任务(文中此后称为<code>Task</code>)与<code>Worker</code>是什么关系呢? 是否存在对应关系? 这些对应关系需要记录吗? 通常, 在常见的主从关系中, 主节点需要记录从节点的信息,例如线程id等表名身份的信息, 但在我们的<code>MapReduce</code>中却没有这样的必要, 因为<code>Worker</code>节点是可以扩容的, 而<code>Coordinator</code>与<code>Worker</code>之间只有传递<code>Task</code>相关信息的需求, 因此<code>Coordinator</code>只需要记录<code>Task</code>任务的状态即可, <code>Task</code>分配给<code>Worker</code>后执行可能成功或失败, 因此<code>Coordinator</code>还需要维护任务执行的时间信息, 以便在超时后重新分配任务。因此，<code>Map</code>、<code>Reduce</code>任务、<code>Coordinator</code>和<code>Worker</code>的关系可以参考下图:</p><p><img src="/../../images/MapReduce%E4%BB%BB%E5%8A%A1%E5%85%B3%E7%B3%BB.png" alt="MapReduce_relation"></p><p> <code>Worker</code>可能在不同时间执行不同的<code>Task</code>, 也可能什么也不做(初始状态或等候所有<code>Map Task</code>完成时可能会闲置)</p></li><li><p><code>Map</code>、<code>Reduce</code>任务有多少个? 如何分配?</p><ul><li><code>Map Task</code>实际上在此实验中被简化了, 每个<code>Map Task</code>的任务就是处理一个<code>.txt</code>文件, 因此<code>Map Task</code>的数量实际上就是<code>.txt</code>文件的数量。 因此, 每个<code>.txt</code>文件对应的<code>Map Task</code>需要<code>Coordinator</code>记录其执行情况并追踪。</li><li><code>Reduce Task</code>的数量是<code>nReduce</code>。由于<code>Map Task</code>会将文件的内容分割为指定的<code>nReduce</code>份, 每一份应当由序号标明, 拥有这样的序号的多个<code>Map Task</code>的输出汇总起来就是对应的<code>Reduce Task</code>的输入。</li></ul></li><li><p>中间文件的格式是怎么样的? <code>Reduce</code>任务如何选择中间文件作为输入?<br>因为<code>Map Task</code>分割采用的是统一的哈希函数<code>ihash</code>, 所以相同的<code>key</code>一定会被<code>Map Task</code>输出到格式相同的中间文件上。例如在<code>wc</code>任务中, <code>Map Task 1</code>和<code>Map Task 2</code>输入文件中都存在<code>hello</code>这个词, <code>Map Task 1</code>中所有的<code>hello</code>会被输出到<code>mr-out-1-5</code>这个中间文件, <code>1</code>代表<code>Map Task</code>序号, <code>5</code>代表被哈希值取模的结果。那么，<code>Map Task 2</code>中所有的<code>hello</code>会被输出到<code>mr-out-2-5</code>这个中间文件。那么<code>Reduce Task 5</code>读取的就是形如<code>mr-out-*-5</code>这样的文件。</p></li></ol><h1 id="3-设计与实现"><a href="#3-设计与实现" class="headerlink" title="3 设计与实现"></a>3 设计与实现</h1><h2 id="3-1-RPC设计"><a href="#3-1-RPC设计" class="headerlink" title="3.1 RPC设计"></a>3.1 <code>RPC</code>设计</h2><h3 id="3-1-1-消息类型"><a href="#3-1-1-消息类型" class="headerlink" title="3.1.1. 消息类型"></a>3.1.1. 消息类型</h3><p>,通信时首先需要确定这个消息是什么类型, 通过前述分析可知, 通信的信息类型包括: </p><ul><li><code>Worker</code>请求任务</li><li><code>Coordinator</code>分配<code>Reduce</code>或<code>Map</code>任务</li><li><code>Worker</code>报告<code>Reduce</code>或<code>Map</code>任务的执行情况(成功或失败)</li><li><code>Coordinator</code>告知<code>Worker</code>休眠（暂时没有任务需要执行）</li><li><code>Coordinator</code>告知<code>Worker</code>退出（所有任务执行成功）</li></ul><p>每一种消息类型会需要附带额外的信息, 例如<code>Coordinator</code>分配任务需要告知任务的ID, <code>Map</code>任务还需要告知<code>NReduce</code>,和输入文件名。<br>综上考虑, 消息类型的定义如下(<code>Send</code>和<code>Reply</code>是从<code>Worker</code>视角出发的):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    AskForTask      MsgType = <span class="literal">iota</span> <span class="comment">// `Worker`请求任务</span></span><br><span class="line">    MapTaskAlloc                   <span class="comment">// `Coordinator`分配`Map`任务</span></span><br><span class="line">    ReduceTaskAlloc                <span class="comment">// `Coordinator`分配`Reduce`任务</span></span><br><span class="line">    MapSuccess                     <span class="comment">// `Worker`报告`Map`任务的执行成功</span></span><br><span class="line">    MapFailed                      <span class="comment">// `Worker`报告`Map`任务的执行失败</span></span><br><span class="line">    ReduceSuccess                  <span class="comment">// `Worker`报告`Reduce`任务的执行成功</span></span><br><span class="line">    ReduceFailed                   <span class="comment">//`Worker`报告`Reduce`任务的执行失败</span></span><br><span class="line">    Shutdown                       <span class="comment">// `Coordinator`告知`Worker`退出（所有任务执行成功）</span></span><br><span class="line">    Wait                           <span class="comment">//`Coordinator`告知`Worker`休眠（暂时没有任务需要执行）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MessageSend <span class="keyword">struct</span> &#123;</span><br><span class="line">    MsgType MsgType</span><br><span class="line">    TaskID  <span class="type">int</span> <span class="comment">// `Worker`回复的消息类型如MapSuccess等需要使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MessageReply <span class="keyword">struct</span> &#123;</span><br><span class="line">    MsgType  MsgType</span><br><span class="line">    NReduce  <span class="type">int</span>    <span class="comment">// MapTaskAlloc需要告诉Map Task 切分的数量</span></span><br><span class="line">    TaskID   <span class="type">int</span>    <span class="comment">// 任务Id用于选取输入文件</span></span><br><span class="line">    TaskName <span class="type">string</span> <span class="comment">// MapSuccess专用: 告知输入.txt文件的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-通信函数设计"><a href="#3-1-2-通信函数设计" class="headerlink" title="3.1.2 通信函数设计"></a>3.1.2 通信函数设计</h3><p>在我的设计中，<code>Worker</code>只需要有2个动作: </p><ul><li>向<code>Coordinator</code>请求<code>Task</code></li><li>向<code>Coordinator</code>报告之前的<code>Task</code>的执行情况</li></ul><p>因此, <code>worker.go</code>中通信函数应该是下面的样子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CallForReportStatus</span><span class="params">(succesType MsgType, taskID <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 报告Task执行情况</span></span><br><span class="line">    <span class="comment">// declare an argument structure.</span></span><br><span class="line">    args := MessageSend&#123;</span><br><span class="line">        MsgType: succesType,</span><br><span class="line">        TaskID:  taskID,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err := call(<span class="string">&quot;Coordinator.NoticeResult&quot;</span>, &amp;args, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CallForTask</span><span class="params">()</span></span> *MessageReply &#123;</span><br><span class="line">    <span class="comment">// 请求一个Task</span></span><br><span class="line">    <span class="comment">// declare an argument structure.</span></span><br><span class="line">    args := MessageSend&#123;</span><br><span class="line">        MsgType: AskForTask,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// declare a reply structure.</span></span><br><span class="line">    reply := MessageReply&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// send the RPC request, wait for the reply.</span></span><br><span class="line">    err := call(<span class="string">&quot;Coordinator.AskForTask&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// fmt.Printf(&quot;TaskName %v, NReduce %v, taskID %v\n&quot;, reply.TaskName, reply.NReduce, reply.TaskID)</span></span><br><span class="line">        <span class="keyword">return</span> &amp;reply</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// log.Println(err.Error())</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>coordinator.go</code>有相应的处理函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> AskForTask(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> NoticeResult(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这些处理函数则需要进一步的设计。</p><h2 id="3-2-Worker设计"><a href="#3-2-Worker设计" class="headerlink" title="3.2 Worker设计"></a>3.2 <code>Worker</code>设计</h2><h3 id="3-2-1-Worker主函数设计"><a href="#3-2-1-Worker主函数设计" class="headerlink" title="3.2.1 Worker主函数设计"></a>3.2.1 <code>Worker</code>主函数设计</h3><p>由之前的分析可以看出，<code>Woker</code>所做的内容就是不断的请求任务、执行任务和回复任务执行情况，因此，可以很容易地写出<code>Worker</code>函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main/mrworker.go calls this function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue,</span><br><span class="line">reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your worker implementation here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 循环请求</span></span><br><span class="line">replyMsg := CallForTask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> replyMsg.MsgType &#123;</span><br><span class="line"><span class="keyword">case</span> MapTaskAlloc:</span><br><span class="line">err := HandleMapTask(replyMsg, mapf)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">_ = CallForReportStatus(MapSuccess, replyMsg.TaskID)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// log.Println(&quot;Worker: Map Task failed&quot;)</span></span><br><span class="line">_ = CallForReportStatus(MapFailed, replyMsg.TaskID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> ReduceTaskAlloc:</span><br><span class="line">err := HandleReduceTask(replyMsg, reducef)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">_ = CallForReportStatus(ReduceSuccess, replyMsg.TaskID)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// log.Println(&quot;Worker: Map Task failed&quot;)</span></span><br><span class="line">_ = CallForReportStatus(ReduceFailed, replyMsg.TaskID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> Wait:</span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line"><span class="keyword">case</span> Shutdown:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-Map-Task执行函数"><a href="#3-2-2-Map-Task执行函数" class="headerlink" title="3.2.2 Map Task执行函数"></a>3.2.2 <code>Map Task</code>执行函数</h3><p><code>HandleMapTask</code>函数是执行具体的<code>MapTask</code>, 这样部分很简单, 可以从<code>mrsequential.go</code>中偷代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleMapTask</span><span class="params">(reply *MessageReply, mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue) <span class="type">error</span> &#123;</span><br><span class="line">file, err := os.Open(reply.TaskName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">content, err := io.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行mapf</span></span><br><span class="line">kva := mapf(reply.TaskName, <span class="type">string</span>(content))</span><br><span class="line">sort.Sort(ByKey(kva))</span><br><span class="line"></span><br><span class="line">oname_prefix := <span class="string">&quot;mr-out-&quot;</span> + strconv.Itoa(reply.TaskID) + <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line">key_group := <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kva &#123;</span><br><span class="line">key_group[kv.Key] = <span class="built_in">append</span>(key_group[kv.Key], kv.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先清理可能存在的垃圾</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 原子重命名的方法</span></span><br><span class="line">_ = DelFileByMapId(reply.TaskID, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, values := <span class="keyword">range</span> key_group &#123;</span><br><span class="line">redId := ihash(key)</span><br><span class="line">oname := oname_prefix + strconv.Itoa(redId%reply.NReduce)</span><br><span class="line"><span class="keyword">var</span> ofile *os.File</span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(oname); os.IsNotExist(err) &#123;</span><br><span class="line"><span class="comment">// 文件夹不存在</span></span><br><span class="line">ofile, _ = os.Create(oname)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ofile, _ = os.OpenFile(oname, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">&#125;</span><br><span class="line">enc := json.NewEncoder(ofile)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">err := enc.Encode(&amp;KeyValue&#123;Key: key, Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ofile.Close()</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ofile.Close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然偷了很多代码, 但是有家店需要注意, 因为之前的<code>Worker</code>可能写入了一部分数据到中间文件后失败的情况, 之后<code>Coordinator</code>重新分配任务时, 文件是可能存在脏数据的, 因此需要先执行清理:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = DelFileByMapId(reply.TaskID, <span class="string">&quot;./&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelFileByMapId</span><span class="params">(targetNumber <span class="type">int</span>, path <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 创建正则表达式，X 是可变的指定数字</span></span><br><span class="line">pattern := fmt.Sprintf(<span class="string">`^mr-out-%d-\d+$`</span>, targetNumber)</span><br><span class="line">regex, err := regexp.Compile(pattern)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取当前目录中的文件</span></span><br><span class="line">files, err := os.ReadDir(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历文件，查找匹配的文件</span></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line"><span class="keyword">if</span> file.IsDir() &#123;</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// 跳过目录</span></span><br><span class="line">&#125;</span><br><span class="line">fileName := file.Name()</span><br><span class="line"><span class="keyword">if</span> regex.MatchString(fileName) &#123;</span><br><span class="line"><span class="comment">// 匹配到了文件，删除它</span></span><br><span class="line">filePath := filepath.Join(path, file.Name())</span><br><span class="line">err := os.Remove(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DelFileByMapId</code>函数删除特定<code>Map Task</code>的输出文件, 但这样的执行存在一定隐患:</p><ul><li>首先是<code>Coordinator</code>只能重新分配一个<code>Worker</code>执行<code>Coordinator</code>认为死掉的任务, 这一点可以通过加锁和记录时间戳完成, 后续会讲到</li><li>其次, 如果之前死掉的<code>Worker</code>又活了,其可能和现在的<code>Worker</code>的输出又有交叉了</li></ul><p>因此, 目前的实现是存在一定漏洞的, 有以下的改进方案:</p><ol><li>参考官方的提示, 先为当前的中间文件使用临时名, 完成操作后再进行原子重命名</li><li>通过加文件锁的方式保护文件</li></ol><blockquote><p>Ps: 后续有时间再改代码吧</p></blockquote><h3 id="3-2-3-Reduce-Task执行函数"><a href="#3-2-3-Reduce-Task执行函数" class="headerlink" title="3.2.3 Reduce Task执行函数"></a>3.2.3 <code>Reduce Task</code>执行函数</h3><p><code>Reduce Task</code>手机对应序号的中间文件, 汇总后应用指定的<code>reduce函数</code>,实现也比较简单:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleReduceTask</span><span class="params">(reply *MessageReply, reducef <span class="keyword">func</span>(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">key_id := reply.TaskID</span><br><span class="line"></span><br><span class="line">k_vs := <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">fileList, err := ReadSpecificFile(key_id, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整理所有的中间文件</span></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> fileList &#123;</span><br><span class="line">dec := json.NewDecoder(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> kv KeyValue</span><br><span class="line"><span class="keyword">if</span> err := dec.Decode(&amp;kv); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">k_vs[kv.Key] = <span class="built_in">append</span>(k_vs[kv.Key], kv.Value)</span><br><span class="line">&#125;</span><br><span class="line">file.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的键并排序</span></span><br><span class="line"><span class="keyword">var</span> keys []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> k_vs &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line">oname := <span class="string">&quot;mr-out-&quot;</span> + strconv.Itoa(reply.TaskID)</span><br><span class="line">ofile, err := os.Create(oname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ofile.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">output := reducef(key, k_vs[key])</span><br><span class="line">_, err := fmt.Fprintf(ofile, <span class="string">&quot;%v %v\n&quot;</span>, key, output)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DelFileByReduceId(reply.TaskID, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是, 我收集文件内容是使用了<code>map</code>, 而迭代<code>map</code>时, <code>key</code>的顺序是随机的, 因此需要先进行对<code>key</code>排序的操作:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有的键并排序</span></span><br><span class="line"><span class="keyword">var</span> keys []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> k_vs &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br></pre></td></tr></table></figure><blockquote><p>其实这里也存在漏洞:同样就是死了的<code>Worker</code>突然复活了怎么办的问题，相比<code>Map Task</code>来说, 这里虽然相对不容易出错, 因为这里对多个中间文件只存在读取而不存在写入, 将内容读取到内存中不会有冲突的。出错只可能在将数据在写入到指定的文件时, <code>os.Create(oname)</code>也会存在竞争条件：因为网络等问题，<code>Coordinator</code>启动了多个<code>Worker</code>, 多个<code>Worker</code>同时运行，并且都尝试创建同一个文件名<code>oname</code>, 假设一个Worker先创建了oname并写入了一部分数据，当另一个Worker再次调用os.Create(oname)时，之前的数据将会被清空。这意味着第一个Worker在接下来的写操作中不会出现错误，但它写入的部分数据会丢失，因为第二个Worker已经截断了文件。</p></blockquote><p>因此, 目前的实现是也存在一定漏洞的, 有以下的改进方案:</p><ol><li>参考官方的提示, 先为当前的中间文件使用临时名, 完成操作后再进行原子重命名</li><li>通过加文件锁的方式保护文件</li></ol><h2 id="3-3-Coordinator设计"><a href="#3-3-Coordinator设计" class="headerlink" title="3.3 Coordinator设计"></a>3.3 <code>Coordinator</code>设计</h2><h3 id="3-3-1-TaskInfo设计"><a href="#3-3-1-TaskInfo设计" class="headerlink" title="3.3.1 TaskInfo设计"></a>3.3.1 <code>TaskInfo</code>设计</h3><p>首先需要考虑的是, 如何维护<code>Task</code>的执行信息, <code>Task</code>执行状态包括了: 未执行、执行者、执行失败、执行完成。<br>这里有一个很重要的问题需要考虑， 超时的任务时什么状态呢？因为在我的设计中，<code>Coordinator</code>与<code>Worker</code>是通过<code>RPC</code>来驱动彼此运行的, 当然你也可以启动一个<code>goroutine</code>间隔地检查是否超时, 但为了使设计更简单, 我们可以这样设计检查超时的方案:</p><ol><li>为每个<code>Worker</code>分配<code>Task</code>时需要记录<code>Task</code>被分配的时间戳, 并将其状态置为<code>running</code></li><li>为每个<code>Worker</code>分配<code>Task</code>, 遍历存储<code>TaskInfo</code>的数据结构, 检查每一个状态为<code>running</code>的<code>Task</code>的时间戳是否与当前时间戳差距大于<code>10s</code>, 如果是, 则代表这个<code>Task</code>超时了, 立即将它分配给当前请求的<code>Worker</code>, 并更新其时间戳</li><li>如果导致<code>Task</code>超时的老旧的<code>Woker</code>之后又完成了, 结果也就是这个<code>Task</code>返回了多次执行成功的报告而已, 可忽略</li></ol><blockquote><p>PS: <code>Worker</code>执行失败有2种, 一种是<code>Worker</code>没有崩溃但发现了<code>error</code>, 这时<code>Worker</code>会将错误报告给<code>Coordinator</code>, <code>Coordinator</code>会将其状态设置为<code>failed</code>, 另一种情况是<code>Worker</code>崩溃了, 连通知都做不到, 这就以超时体现出来, 处理好超时即可</p></blockquote><p>因此, 我如下设计<code>TaskInfo</code>的数据结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> taskStatus <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Task 状态</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">idle     taskStatus = <span class="literal">iota</span> <span class="comment">// 闲置未分配</span></span><br><span class="line">running                    <span class="comment">// 正在运行</span></span><br><span class="line">finished                   <span class="comment">// 完成</span></span><br><span class="line">failed                     <span class="comment">//失败</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map Task 执行状态</span></span><br><span class="line"><span class="keyword">type</span> MapTaskInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">TaskId    <span class="type">int</span>        <span class="comment">// Task 序号</span></span><br><span class="line">Status    taskStatus <span class="comment">// 执行状态</span></span><br><span class="line">StartTime <span class="type">int64</span>      <span class="comment">// 开始执行时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce Task 执行状态</span></span><br><span class="line"><span class="keyword">type</span> ReduceTaskInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ReduceTask的 序号 由数组下标决定, 不进行额外存储</span></span><br><span class="line">Status    taskStatus <span class="comment">// 执行状态</span></span><br><span class="line">StartTime <span class="type">int64</span>      <span class="comment">// 开始执行时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your definitions here.</span></span><br><span class="line">NReduce     <span class="type">int</span>                     <span class="comment">// the number of reduce tasks to use.</span></span><br><span class="line">MapTasks    <span class="keyword">map</span>[<span class="type">string</span>]*MapTaskInfo <span class="comment">//MapTaskInfo</span></span><br><span class="line">mu          sync.Mutex              <span class="comment">// 一把大锁保平安</span></span><br><span class="line">ReduceTasks []*ReduceTaskInfo       <span class="comment">// ReduceTaskInfo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>TaskInfo</code>的初始化方法, 并在<code>MakeCoordinator</code>中调用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> initTask(files []<span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> idx, fileName := <span class="keyword">range</span> files &#123;</span><br><span class="line">c.MapTasks[fileName] = &amp;MapTaskInfo&#123;</span><br><span class="line">TaskId: idx,</span><br><span class="line">Status: idle,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> idx := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line">c.ReduceTasks[idx] = &amp;ReduceTaskInfo&#123;</span><br><span class="line">Status: idle,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeCoordinator</span><span class="params">(files []<span class="type">string</span>, nReduce <span class="type">int</span>)</span></span> *Coordinator &#123;</span><br><span class="line">c := Coordinator&#123;</span><br><span class="line">NReduce:     nReduce,</span><br><span class="line">MapTasks:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*MapTaskInfo),</span><br><span class="line">ReduceTasks: <span class="built_in">make</span>([]*ReduceTaskInfo, nReduce),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="comment">// 由于每一个文件名就是一个map task ,需要初始化任务状态</span></span><br><span class="line">c.initTask(files)</span><br><span class="line"></span><br><span class="line">c.server()</span><br><span class="line"><span class="keyword">return</span> &amp;c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-RPC-响应函数-AskForTask"><a href="#3-3-2-RPC-响应函数-AskForTask" class="headerlink" title="3.3.2 RPC 响应函数-AskForTask"></a>3.3.2 <code>RPC</code> 响应函数-<code>AskForTask</code></h3><p>这部分算是较为复杂的, 其逻辑如下:</p><ol><li>如果有闲置的任务(<code>idle</code>)和之前执行失败(<code>failed</code>)的<code>Map Task</code>, 选择这个任务进行分配</li><li>如果检查到有超时的任务<code>Map Task</code>, 选择这个任务进行分配</li><li>如果以上的<code>Map Task</code>均不存在, 但<code>Map Task</code>又没有全部执行完成, 告知<code>Worker</code>先等待</li><li><code>Map Task</code>全部执行完成的情况下, 按照<code>1</code>和<code>2</code>相同的逻辑进行<code>Reduce Task</code>的分配</li><li>所有的<code>Task</code>都执行完成了, 告知<code>Worker</code>退出</li></ol><p>因此, <code>AskForTask</code>代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> AskForTask(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> req.MsgType != AskForTask &#123;</span><br><span class="line"><span class="keyword">return</span> BadMsgType</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 选择一个任务返回给worker</span></span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"></span><br><span class="line">count_map_success := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fileName, taskinfo := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line"><span class="comment">// 选择闲置或者失败的任务</span></span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_map_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 将未分配的任务和已经失败的任务分配给这个worker</span></span><br><span class="line">reply.MsgType = MapTaskAlloc</span><br><span class="line">reply.TaskName = fileName</span><br><span class="line">reply.NReduce = c.NReduce</span><br><span class="line">reply.TaskID = taskinfo.TaskId</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Map Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改状态信息</span></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_map_success &lt; <span class="built_in">len</span>(c.MapTasks) &#123;</span><br><span class="line"><span class="comment">// map任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count_reduce_success := <span class="number">0</span></span><br><span class="line"><span class="comment">// 运行到这里说明map任务都已经完成</span></span><br><span class="line"><span class="keyword">for</span> idx, taskinfo := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_reduce_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 分配给其一个Reduce任务</span></span><br><span class="line">reply.MsgType = ReduceTaskAlloc</span><br><span class="line">reply.TaskID = idx</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Reduce Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_reduce_success &lt; <span class="built_in">len</span>(c.ReduceTasks) &#123;</span><br><span class="line"><span class="comment">// reduce任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行到这里说明所有任务都已经完成</span></span><br><span class="line">reply.MsgType = Shutdown</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这里, 我对数据的保护是一把大锁保平安, 这其实可以优化的</p></blockquote><h3 id="3-3-3-RPC-响应函数-NoticeResult"><a href="#3-3-3-RPC-响应函数-NoticeResult" class="headerlink" title="3.3.3 RPC 响应函数-NoticeResult"></a>3.3.3 <code>RPC</code> 响应函数-<code>NoticeResult</code></h3><p>这个函数就简单很多了, 只需要改变对应<code>TaskInfo</code>的状态即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> NoticeResult(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> req.MsgType == MapSuccess &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> v.TaskId == req.TaskID &#123;</span><br><span class="line">v.Status = finished</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: map task%v finished\n&quot;, v.TaskId)</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.MsgType == ReduceSuccess &#123;</span><br><span class="line">c.ReduceTasks[req.TaskID].Status = finished</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: reduce task%v finished\n&quot;, req.TaskID)</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.MsgType == MapFailed &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> v.TaskId == req.TaskID &#123;</span><br><span class="line">v.Status = failed</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: map task%v failed\n&quot;, v.TaskId)</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.MsgType == ReduceFailed &#123;</span><br><span class="line">c.ReduceTasks[req.TaskID].Status = failed</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: reduce task%v failed\n&quot;, req.TaskID)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-Done方法"><a href="#3-3-4-Done方法" class="headerlink" title="3.3.4 Done方法"></a>3.3.4 <code>Done</code>方法</h3><p><code>Done</code>方法是最简单的, 遍历<code>TaskInfo</code>的数据结构, 如果全部完成则返回<code>True</code>, </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> Done() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="comment">// 先确认mapTask完成</span></span><br><span class="line"><span class="keyword">for</span> _, taskinfo := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> taskinfo.Status != finished &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&quot;Coordinator: All map task finished&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再确认Reduce Task 完成</span></span><br><span class="line"><span class="keyword">for</span> _, taskinfo := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line"><span class="keyword">if</span> taskinfo.Status != finished &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&quot;Coordinator: All reduce task finished&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// time.Sleep(time.Second * 5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个小细节, <code>time.Sleep(time.Second * 5)</code>是为了让<code>Coordinator</code>延迟关闭, 这样可以留出时间告知<code>Worker</code>退出, 也可以直接注释掉它, 让测试跑得更快</p><h1 id="4-测试和优化"><a href="#4-测试和优化" class="headerlink" title="4 测试和优化"></a>4 测试和优化</h1><h2 id="4-1-原实现测试"><a href="#4-1-原实现测试" class="headerlink" title="4.1 原实现测试"></a>4.1 原实现测试</h2><p>运行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time bash test-mr.sh</span><br></pre></td></tr></table></figure><p>结果如下图, 耗时3m3s</p><p><img src="/../../images/MapReduce-Test.png" alt="MapReduce-Test"></p><h2 id="4-2-优化"><a href="#4-2-优化" class="headerlink" title="4.2 优化"></a>4.2 优化</h2><h3 id="4-2-1-原子重命名"><a href="#4-2-1-原子重命名" class="headerlink" title="4.2.1 原子重命名"></a>4.2.1 原子重命名</h3><p>按照官方提示, 使用原子重命名避免竞争, 修改<code>HandleMapTask</code>函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleMapTask</span><span class="params">(reply *MessageReply, mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue) <span class="type">error</span> &#123;</span><br><span class="line">file, err := os.Open(reply.TaskName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">content, err := io.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kva := mapf(reply.TaskName, <span class="type">string</span>(content))</span><br><span class="line">sort.Sort(ByKey(kva))</span><br><span class="line"></span><br><span class="line">tempFiles := <span class="built_in">make</span>([]*os.File, reply.NReduce)</span><br><span class="line">encoders := <span class="built_in">make</span>([]*json.Encoder, reply.NReduce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kva &#123;</span><br><span class="line">redId := ihash(kv.Key) % reply.NReduce</span><br><span class="line"><span class="keyword">if</span> encoders[redId] == <span class="literal">nil</span> &#123;</span><br><span class="line">tempFile, err := ioutil.TempFile(<span class="string">&quot;&quot;</span>, fmt.Sprintf(<span class="string">&quot;mr-map-tmp-%d&quot;</span>, redId))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> tempFile.Close()</span><br><span class="line">tempFiles[redId] = tempFile</span><br><span class="line">encoders[redId] = json.NewEncoder(tempFile)</span><br><span class="line">&#125;</span><br><span class="line">err := encoders[redId].Encode(&amp;kv)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, file := <span class="keyword">range</span> tempFiles &#123;</span><br><span class="line"><span class="keyword">if</span> file != <span class="literal">nil</span> &#123;</span><br><span class="line">fileName := file.Name()</span><br><span class="line">file.Close()</span><br><span class="line">newName := fmt.Sprintf(<span class="string">&quot;mr-out-%d-%d&quot;</span>, reply.TaskID, i)</span><br><span class="line"><span class="keyword">if</span> err := os.Rename(fileName, newName); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time bash test-mr.sh</span><br></pre></td></tr></table></figure><p>结果如下图, 耗时2m52s, 原子重命名节省了原实现中的清理耗费的时间, 节约了差不多10s的样子</p><p><img src="/../../images/MapReduce-Test-2.png" alt="MapReduce-Test-2"></p><h3 id="4-2-2-锁细化"><a href="#4-2-2-锁细化" class="headerlink" title="4.2.2 锁细化"></a>4.2.2 锁细化</h3><p>我们可以发现, 在<code>Worker</code>请求任务时, <code>Map Task</code>是需要先全部执行成功的, 因此我们可以增加一个字段记录<code>Map Task</code>是否全部完成, 同时为<code>MapTaskInfo</code>和<code>ReduceTaskInfo</code>分别实现设计一个锁来取代原来的大锁, 代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your definitions here.</span></span><br><span class="line">NReduce       <span class="type">int</span>                     <span class="comment">// the number of reduce tasks to use.</span></span><br><span class="line">MapTasks      <span class="keyword">map</span>[<span class="type">string</span>]*MapTaskInfo <span class="comment">//MapTaskInfo</span></span><br><span class="line">MapSuccess    <span class="type">bool</span>                    <span class="comment">// Map Task 是否全部完成</span></span><br><span class="line">muMap         sync.Mutex              <span class="comment">// Map 锁, 保护 MapTasks</span></span><br><span class="line">ReduceTasks   []*ReduceTaskInfo       <span class="comment">// ReduceTaskInfo</span></span><br><span class="line">ReduceSuccess <span class="type">bool</span>                    <span class="comment">// Reduce Task 是否全部完成</span></span><br><span class="line">muReduce      sync.Mutex              <span class="comment">// Reduce 锁, 保护 ReduceTasks</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> AskForTask(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> req.MsgType != AskForTask &#123;</span><br><span class="line"><span class="keyword">return</span> BadMsgType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !c.MapSuccess &#123;</span><br><span class="line"><span class="comment">// 选择一个 Map Task 返回给worker</span></span><br><span class="line"></span><br><span class="line">c.muMap.Lock()</span><br><span class="line"></span><br><span class="line">count_map_success := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fileName, taskinfo := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line"><span class="comment">// 选择闲置或者失败的任务</span></span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_map_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 将未分配的任务和已经失败的任务分配给这个worker</span></span><br><span class="line">reply.MsgType = MapTaskAlloc</span><br><span class="line">reply.TaskName = fileName</span><br><span class="line">reply.NReduce = c.NReduce</span><br><span class="line">reply.TaskID = taskinfo.TaskId</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Map Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改状态信息</span></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line">c.muMap.Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.muMap.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_map_success &lt; <span class="built_in">len</span>(c.MapTasks) &#123;</span><br><span class="line"><span class="comment">// map任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.MapSuccess = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !c.ReduceSuccess &#123;</span><br><span class="line"><span class="comment">// 选择一个 Reduce Task 返回给worker</span></span><br><span class="line">c.muReduce.Lock()</span><br><span class="line"></span><br><span class="line">count_reduce_success := <span class="number">0</span></span><br><span class="line"><span class="comment">// 运行到这里说明map任务都已经完成</span></span><br><span class="line"><span class="keyword">for</span> idx, taskinfo := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_reduce_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 分配给其一个Reduce任务</span></span><br><span class="line">reply.MsgType = ReduceTaskAlloc</span><br><span class="line">reply.TaskID = idx</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Reduce Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line"></span><br><span class="line">c.muReduce.Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.muReduce.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_reduce_success &lt; <span class="built_in">len</span>(c.ReduceTasks) &#123;</span><br><span class="line"><span class="comment">// reduce任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.ReduceSuccess = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行到这里说明所有任务都已经完成</span></span><br><span class="line">reply.MsgType = Shutdown</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time bash test-mr.sh</span><br></pre></td></tr></table></figure><p>结果如下图, 耗时2m39s, 原子重命名节省了原实现中的清理耗费的时间, 又节约了差不多13s的样子<br>另外别忘了<code>NoticeResult</code>也要相应地修改, 由于比较简单就不列出来了, 可以直接看仓库代码。</p><p><img src="/../../images/MapReduce-Test-3.png" alt="MapReduce-Test-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-实验介绍&quot;&gt;&lt;a href=&quot;#1-实验介绍&quot; class=&quot;headerlink&quot; title=&quot;1 实验介绍&quot;&gt;&lt;/a&gt;1 实验介绍&lt;/h1&gt;&lt;p&gt;本次实验是实现一个简易版本的&lt;code&gt;MapReduce&lt;/code&gt;编程框架,官方文档在这里:&lt;a hr</summary>
      
    
    
    
    <category term="MIT6.5840(6.824) 2023" scheme="http://example.com/categories/MIT6-5840-6-824-2023/"/>
    
    
  </entry>
  
  <entry>
    <title>chapter3练习</title>
    <link href="http://example.com/2023/12/19/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%BA%8C/%E9%98%B6%E6%AE%B52-rCore-chapter3%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2023/12/19/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%BA%8C/%E9%98%B6%E6%AE%B52-rCore-chapter3%E7%BB%83%E4%B9%A0/</id>
    <published>2023-12-19T14:54:06.000Z</published>
    <updated>2023-12-23T05:28:28.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-实现的功能描述"><a href="#1-实现的功能描述" class="headerlink" title="1 实现的功能描述"></a>1 实现的功能描述</h1><ol><li>在<code>task.rs</code>中的<code>TaskControlBlock</code>结构体增加了<code>sys_call_times</code>数组, 用于记录当前<code>task</code>中各个系统调用的次数</li><li>每次执行系统调用时, 将全局变量<code>TASK_MANAGER</code>中当前任务<code>current_task</code>对应的<code>TaskControlBlock</code>结构体的系统调用记录自增</li><li>为<code>TaskManager</code>实现<code>get_sys_call_times</code>方法, 获取当前任务<code>current_task</code>对应的<code>TaskControlBlock</code>结构体的系统调用数组的拷贝</li><li>完成<code>process.rs</code>的<code>sys_task_info</code>, 调用<code>get_sys_call_times</code>和<code>get_time_ms</code>获取<code>TaskInfo</code>结构体的<code>syscall_times</code>和<code>time</code>部分, <code>status</code>部分设为<code>Running</code></li></ol><h1 id="2-简答作业"><a href="#2-简答作业" class="headerlink" title="2 简答作业"></a>2 简答作业</h1><h2 id="2-1-简答作业第一部分"><a href="#2-1-简答作业第一部分" class="headerlink" title="2.1 简答作业第一部分"></a>2.1 简答作业第一部分</h2><p>正确进入 U 态后，程序的特征还应有：使用 S 态特权指令，访问 S 态寄存器后会报错。 请同学们可以自行测试这些内容 (运行 Rust 三个 bad 测例 (ch2b_bad_*.rs) ， 注意在编译时至少需要指定 LOG&#x3D;ERROR 才能观察到内核的报错信息) ， 描述程序出错行为，同时注意注明你使用的 sbi 及其版本。</p><p>Rustsbi 版本为: 0.2.0-alpha.2</p><p>出现报错: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[kernel] PageFault <span class="keyword">in</span> application, bad addr = 0x0, bad instruction = 0x804003c4, kernel killed it.</span><br><span class="line">[kernel] IllegalInstruction <span class="keyword">in</span> application, kernel killed it.</span><br><span class="line">[kernel] IllegalInstruction <span class="keyword">in</span> application, kernel killed it.</span><br></pre></td></tr></table></figure><p><code>ch2b_bad_address.rs</code> 由于除0错误触发异常退出<br><code>ch2b_bad_instructions.rs</code> 在用户态非法使用指令<code>sret</code><br><code>ch2b_bad_register.rs</code> 在用户态非法使用指令<code>csrr</code></p><h2 id="2-2-简答作业第二部分"><a href="#2-2-简答作业第二部分" class="headerlink" title="2.2 简答作业第二部分"></a>2.2 简答作业第二部分</h2><p>深入理解 trap.S 中两个函数 __alltraps 和 __restore 的作用，并回答如下问题:</p><h3 id="2-2-1-L40：刚进入-restore-时，a0-代表了什么值。请指出-restore-的两种使用情景。"><a href="#2-2-1-L40：刚进入-restore-时，a0-代表了什么值。请指出-restore-的两种使用情景。" class="headerlink" title="2.2.1 L40：刚进入 __restore 时，a0 代表了什么值。请指出 __restore 的两种使用情景。"></a>2.2.1 L40：刚进入 __restore 时，a0 代表了什么值。请指出 __restore 的两种使用情景。</h3><blockquote><ol><li>刚进入 __restore 时，a0 代表了系统调用的第一个参数</li><li>__restore 的作用包括:</li></ol><ul><li>从系统调用和异常返回时, 恢复要返回的用户态的上下文信息</li><li>任务切换时, 恢复要切换的任务的上下文信息</li></ul></blockquote><h3 id="2-2-2-L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。"><a href="#2-2-2-L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。" class="headerlink" title="2.2.2 L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。"></a>2.2.2 L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ld t0, 32*8(sp) <span class="comment"># 内核栈 32*8(sp) 处存储了原 sstatus 寄存器的值, 将其读取到 t0</span></span><br><span class="line">ld t1, 33*8(sp) <span class="comment"># 内核栈 32*8(sp) 处存储了原 sepc 寄存器的值, 将其读取到 t1</span></span><br><span class="line">ld t2, 2*8(sp) <span class="comment"># 内核栈 32*8(sp) 处存储了原 sscratch 寄存器的值, 将其读取到 t2</span></span><br><span class="line">csrw sstatus, t0 <span class="comment"># 将 t0中原 sstatus 寄存器的值读取到 sstatus</span></span><br><span class="line">csrw sepc, t1 <span class="comment"># 将 t0中原 sepc 寄存器的值读取到 sepc</span></span><br><span class="line">csrw sscratch, t2 <span class="comment"># 将 t0中原 sscratch 寄存器的值读取到 sscratch</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-L50-L56：为何跳过了-x2-和-x4？"><a href="#2-2-3-L50-L56：为何跳过了-x2-和-x4？" class="headerlink" title="2.2.3 L50-L56：为何跳过了 x2 和 x4？"></a>2.2.3 L50-L56：为何跳过了 x2 和 x4？</h3><ol><li>跳过<code>x2</code>是因为<code>x2</code>对应的用户栈指针保存到了sscratch寄存器, 不需要从内核栈中进行恢复</li><li>跳过<code>x4</code>是因为并没有使用它, 所以无需恢复</li></ol><h3 id="2-2-4-L60：该指令之后，sp-和-sscratch-中的值分别有什么意义？"><a href="#2-2-4-L60：该指令之后，sp-和-sscratch-中的值分别有什么意义？" class="headerlink" title="2.2.4 L60：该指令之后，sp 和 sscratch 中的值分别有什么意义？"></a>2.2.4 L60：该指令之后，sp 和 sscratch 中的值分别有什么意义？</h3><p><code>sp</code>指向用户栈, <code>sscratch</code>指向内核栈</p><h3 id="2-2-5-restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？"><a href="#2-2-5-restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？" class="headerlink" title="2.2.5 __restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？"></a>2.2.5 __restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？</h3><p><code>sret</code>后发生了状态切换, 执行该指令后, PC设置为 <code>sepc</code> 寄存器的值。<code>sepc</code> 存储着产生中断或异常前的指令地址，因此这实现了到原始代码的返回。</p><h3 id="2-2-6-L13：该指令之后，sp-和-sscratch-中的值分别有什么意义？"><a href="#2-2-6-L13：该指令之后，sp-和-sscratch-中的值分别有什么意义？" class="headerlink" title="2.2.6 L13：该指令之后，sp 和 sscratch 中的值分别有什么意义？"></a>2.2.6 L13：该指令之后，sp 和 sscratch 中的值分别有什么意义？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrrw sp, sscratch, sp</span><br></pre></td></tr></table></figure><p><code>sp</code>, <code>sscratch</code>寄存器的内容被交换, <code>sp</code>保存了原<code>sscratch</code>中的内核栈指针, <code>sscratch</code>保存了原<code>sp</code>中的用户栈栈指针</p><h3 id="2-2-7-从-U-态进入-S-态是哪一条指令发生的？"><a href="#2-2-7-从-U-态进入-S-态是哪一条指令发生的？" class="headerlink" title="2.2.7 从 U 态进入 S 态是哪一条指令发生的？"></a>2.2.7 从 U 态进入 S 态是哪一条指令发生的？</h3><p><code>ecall</code>指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-实现的功能描述&quot;&gt;&lt;a href=&quot;#1-实现的功能描述&quot; class=&quot;headerlink&quot; title=&quot;1 实现的功能描述&quot;&gt;&lt;/a&gt;1 实现的功能描述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;task.rs&lt;/code&gt;中的&lt;code&gt;TaskCon</summary>
      
    
    
    
    <category term="清华大学开源操作系统训练营2023" scheme="http://example.com/categories/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A52023/"/>
    
    
  </entry>
  
  <entry>
    <title>MIT6.S081 0: 环境配置</title>
    <link href="http://example.com/2023/12/19/MIT6.S081/0%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/12/19/MIT6.S081/0%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-12-19T13:56:47.000Z</published>
    <updated>2023-12-21T17:45:22.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-课程简介"><a href="#1-课程简介" class="headerlink" title="1 课程简介"></a>1 课程简介</h1><p>MIT6.S081 Operating System Engineering 是麻省理工学院的 <code>PDOS</code> 实验室开设的面向MIT本科生的操作系统课程, 课程前身为MIT6.828。课程主题是介绍 <code>基于 RISCV 架构实现的类Unix OS xv6</code>, 基本上每一部分的内容都有对应的<code>xv6 lab</code>, 涉及页表、中断、内存管理、线程调度、锁、文件系统等OS的基本内容。课程附有专门的教材介绍<code>xv6</code>的设计架构, 并结合了与通用操作系统的比较和相应前沿技术的简单介绍。</p><h1 id="2-资源汇总"><a href="#2-资源汇总" class="headerlink" title="2 资源汇总"></a>2 资源汇总</h1><ol><li>课程官网：<br>2020秋： <a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html">https://pdos.csail.mit.edu/6.828/2020/schedule.html</a><br>2021秋： <a href="https://pdos.csail.mit.edu/6.828/2021/schedule.html">https://pdos.csail.mit.edu/6.828/2021/schedule.html</a></li><li>中文参考文献<br>课程内容翻译（2020秋）： <a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</a><br>xv6中文文档（版本较旧）： <a href="https://th0ar.gitbooks.io/xv6-chinese/content/index.html">https://th0ar.gitbooks.io/xv6-chinese/content/index.html</a></li><li>教材、lab指导书、视频、ppt等资源<br>见官网</li></ol><h1 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3 环境配置"></a>3 环境配置</h1><p>官网的环境配置参考为： <a href="https://pdos.csail.mit.edu/6.828/2020/tools.html">https://pdos.csail.mit.edu/6.828/2020/tools.html</a><br>我的方案是在 <code>Windows11 wsl2</code> 中进行环境配置</p><h2 id="3-1-wsl2安装Ubuntu22-04"><a href="#3-1-wsl2安装Ubuntu22-04" class="headerlink" title="3.1 wsl2安装Ubuntu22.04"></a>3.1 wsl2安装Ubuntu22.04</h2><p>wsl2的安装参考 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/">微软官方文档</a></p><h3 id="3-1-1-启用Linux子系统功能"><a href="#3-1-1-启用Linux子系统功能" class="headerlink" title="3.1.1 启用Linux子系统功能"></a>3.1.1 启用Linux子系统功能</h3><p>系统搜索<strong>启用或关闭Windows功能</strong>，如下图开启功能<br><img src="/../../images/enable_win_func.png" alt="en../imagesble_win_func"></p><h3 id="3-1-2-BIOS开启CPU虚拟化功能"><a href="#3-1-2-BIOS开启CPU虚拟化功能" class="headerlink" title="3.1.2 BIOS开启CPU虚拟化功能"></a>3.1.2 BIOS开启CPU虚拟化功能</h3><p>不同的主板厂商BIOS界面设置不同，大体上的位置可参考下图<br><img src="/../../images/enable-virtualization.png" alt="enable-virtualization"></p><h3 id="3-1-3-安装wsl2"><a href="#3-1-3-安装wsl2" class="headerlink" title="3.1.3 安装wsl2"></a>3.1.3 安装wsl2</h3><p>最好以管理员模式打开powershell，输入如下命令进行安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> wsl <span class="literal">-l</span> <span class="literal">-o</span></span><br><span class="line"><span class="comment"># 改命令会搜索可在线安装的发行版</span></span><br></pre></td></tr></table></figure><p>默认安装Ubuntu20.04</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure><p>或安装指定版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p>如果使用了<a href="https://learn.microsoft.com/zh-cn/windows/terminal/install">Windows Terminal</a>，其选项卡中会自动添加安装的Linux发行版<br>也可以使用powershell进入虚拟机：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">-d</span> Ubuntu</span><br></pre></td></tr></table></figure><h3 id="3-1-4-Ubuntu换源"><a href="#3-1-4-Ubuntu换源" class="headerlink" title="3.1.4 Ubuntu换源"></a>3.1.4 Ubuntu换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>将其替换为如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt <span class="keyword">update</span> 速度，如有需要可自行取消注释</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># <span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-proposed main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="3-2-安装riscv交叉编译工具和qemu"><a href="#3-2-安装riscv交叉编译工具和qemu" class="headerlink" title="3.2 安装riscv交叉编译工具和qemu"></a>3.2 安装riscv交叉编译工具和qemu</h2><h3 id="3-2-1-安装riscv交叉编译工具"><a href="#3-2-1-安装riscv交叉编译工具" class="headerlink" title="3.2.1 安装riscv交叉编译工具"></a>3.2.1 安装riscv交叉编译工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu </span><br></pre></td></tr></table></figure><h3 id="3-2-2-编译安装qemu"><a href="#3-2-2-编译安装qemu" class="headerlink" title="3.2.2 编译安装qemu"></a>3.2.2 编译安装qemu</h3><p>官网指定版本为qemu-5.1.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> qemu-5.1.0</span><br><span class="line">$ ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=<span class="string">&quot;riscv64-softmmu&quot;</span></span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">$ qemu-system-riscv64 --version</span><br><span class="line"><span class="comment"># 成功则输出如下内容</span></span><br><span class="line">QEMU emulator version 5.1.0</span><br><span class="line">Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><h2 id="3-3-安装gdb"><a href="#3-3-安装gdb" class="headerlink" title="3.3 安装gdb"></a>3.3 安装gdb</h2><p>按照指导书进行环境配置对于基础的代码运行是没有问题，但我发现自己按照指导书操作后无法进行<code>gdb</code>调试, 经过总结后在此处给出我的2种解决方案:</p><h3 id="方案1-安装完整的-riscv-gnu-toolchain"><a href="#方案1-安装完整的-riscv-gnu-toolchain" class="headerlink" title="方案1: 安装完整的 riscv-gnu-toolchain"></a>方案1: 安装完整的 <code>riscv-gnu-toolchain</code></h3><p>安装完整的<code>riscv-gnu-toolchain</code>流程如下, 次方法费时较长, 且占据空间较大, 更推荐第二种方法。</p><ol><li>安装依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev</span><br></pre></td></tr></table></figure></li><li>克隆<code>riscv-gnu-toolchain</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/riscv/riscv-gnu-toolchain</span><br></pre></td></tr></table></figure></li><li>编译安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> riscv-gnu-toolchain</span><br><span class="line">$ ./configure --prefix=/usr/local</span><br><span class="line">$ sudo make</span><br></pre></td></tr></table></figure></li></ol><h3 id="方案2-编译安装-riscv64-unknown-elf-gdb"><a href="#方案2-编译安装-riscv64-unknown-elf-gdb" class="headerlink" title="方案2: 编译安装 riscv64-unknown-elf-gdb"></a>方案2: 编译安装 <code>riscv64-unknown-elf-gdb</code></h3><ol><li>安装依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libncurses5-dev python2 python2-dev texinfo libreadline-dev</span><br></pre></td></tr></table></figure></li><li>下载<code>gdb</code>源码<br>此处我选择gdb-13.1, 该版本在<code>wsl2 Ubuntu22.04</code>上使用正常。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐清华源下载</span></span><br><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/gdb-13.1.tar.xz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar -xvf gdb-13.1.tar.x</span><br></pre></td></tr></table></figure></li><li>编译安装<br>只需要指定编译安装<code>riscv64-unknown-elf</code>并配置相关参数。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gdb-13.1</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">$ ../configure --prefix=/your_path --target=riscv64-unknown-elf --enable-tui=<span class="built_in">yes</span></span><br><span class="line">$ make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><h2 id="4-1-克隆仓库"><a href="#4-1-克隆仓库" class="headerlink" title="4.1 克隆仓库"></a>4.1 克隆仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2020</span><br><span class="line">$ <span class="built_in">cd</span> xv6-labs-2020</span><br><span class="line">$ git checkout util</span><br></pre></td></tr></table></figure><h2 id="4-2-第一次运行前设置gdbinit"><a href="#4-2-第一次运行前设置gdbinit" class="headerlink" title="4.2 第一次运行前设置gdbinit"></a>4.2 第一次运行前设置<code>gdbinit</code></h2><p>&#x2F;.gdbinit 是 GNU 调试器（GDB）的一个配置文件，它位于用户的主目录中。当 GDB 启动时，它会自动读取这个文件（如果存在的话），并执行文件中的命令。这允许用户自定义 GDB 的启动行为，包括设置断点、定义宏、修改显示格式等。</p><p>在 ~&#x2F;.gdbinit 文件中，用户可以编写 GDB 命令脚本，这些脚本在每次启动 GDB 时自动执行。这可以极大地提高调试效率，尤其是对于那些需要频繁调试并希望每次调试会话都有一组固定设置的用户来说。</p><p>按照指导, 我们如下进行设置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="built_in">set</span> auto-load safe-path / &gt;&gt; ~/.gdbinit</span></span><br></pre></td></tr></table></figure><h2 id="4-3-启动qemu调试"><a href="#4-3-启动qemu调试" class="headerlink" title="4.3 启动qemu调试"></a>4.3 启动qemu调试</h2><p>在一个终端的xv6仓库下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make qemu-gdb</span><br></pre></td></tr></table></figure><p>在另一个终端的xv6仓库下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ riscv64-unknown-elf-gdb</span><br></pre></td></tr></table></figure><p>结果如图所示<br><img src="/../../images/gdb-qemu.png" alt="gdb-qemu"></p><p>进行断点调试, 例如指定函数<code>uvmalloc</code>断点:<br><img src="/../../images/gdb-uvmalloc.png" alt="gdb-uvmalloc"></p><p>可以看出, 运行<code>ls</code>程序后, 程序停留在了<code>uvmalloc</code>函数的入口处, 证明了gdb调试功能正常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-课程简介&quot;&gt;&lt;a href=&quot;#1-课程简介&quot; class=&quot;headerlink&quot; title=&quot;1 课程简介&quot;&gt;&lt;/a&gt;1 课程简介&lt;/h1&gt;&lt;p&gt;MIT6.S081 Operating System Engineering 是麻省理工学院的 &lt;code&gt;</summary>
      
    
    
    
    <category term="MIT6.S081" scheme="http://example.com/categories/MIT6-S081/"/>
    
    
  </entry>
  
</feed>
