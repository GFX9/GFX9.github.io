<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ToniBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-23T16:45:22.843Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ToniXWD</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim入门到入土</title>
    <link href="http://example.com/2023/12/24/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/Vim%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <id>http://example.com/2023/12/24/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/Vim%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</id>
    <published>2023-12-23T16:05:28.000Z</published>
    <updated>2023-12-23T16:45:22.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-打开-关闭"><a href="#1-打开-关闭" class="headerlink" title="1 打开&#x2F;关闭"></a>1 打开&#x2F;关闭</h1><h2 id="1-1-标签页操作"><a href="#1-1-标签页操作" class="headerlink" title="1.1 标签页操作"></a>1.1 标签页操作</h2><p>在Vim中，可以使用<code>tabnew</code>命令来创建一个新的标签页（tab page）。标签页类似于编辑器中的分页，允许你在同一个Vim实例中同时打开多个文件，并在它们之间进行切换。以下是如何使用<code>tabnew</code>命令的一些示例：</p><ol><li><p>打开一个新的空白标签页：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">tabnew</span></span><br></pre></td></tr></table></figure><p>这将创建一个新的空白标签页，你可以在其中开始编辑新的文件。</p></li><li><p>打开一个特定的文件在新的标签页中：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">tabnew</span> filename</span><br></pre></td></tr></table></figure><p>这将在一个新的标签页中打开名为”filename”的文件。你可以替换”filename”为你想要打开的实际文件的路径。</p></li><li><p>在不同的标签页之间切换：</p><ul><li>切换到下一个标签页：按下<code>gt</code>键。</li><li>切换到上一个标签页：按下<code>gT</code>键。</li></ul></li><li><p>关闭当前的标签页：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">tabclose</span></span><br></pre></td></tr></table></figure><p>这将关闭当前的标签页，并且如果标签页中有未保存的更改，Vim会提示你保存它们。</p></li><li><p>查看所有的标签页：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">tabs</span></span><br></pre></td></tr></table></figure><p>这将显示所有打开的标签页，并且会在当前标签页前面标记一个”%”。</p></li><li><p>使用标签页序号：</p><p>在Normal 模式下，可以按下<code>&#123;N&#125;gt</code>，其中<code>&#123;N&#125;</code>是标签页的序号。例如，如果要切换到第三个标签页，可以按下<code>3gt</code>。</p></li><li><p>使用<code>:tabnext</code>和<code>:tabprev</code>命令：</p><p>你也可以使用<code>:tabnext</code>和<code>:tabprev</code>命令来切换到下一个或上一个标签页。例如，要切换到下一个标签页，可以执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">tabnext</span></span><br></pre></td></tr></table></figure><p>要切换到上一个标签页，可以执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:tabprev</span><br></pre></td></tr></table></figure><p>这些命令可以在不知道标签页序号的情况下方便地切换标签页。</p></li></ol><h2 id="1-2-退出"><a href="#1-2-退出" class="headerlink" title="1.2 退出"></a>1.2 退出</h2><ol><li><p>退出当前标签页</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:q Close current window</span><br></pre></td></tr></table></figure></li><li><p>退出所有标签页</p> <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">qa</span> Close <span class="keyword">all</span> windows</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-3-文件IO"><a href="#1-3-文件IO" class="headerlink" title="1.3 文件IO"></a>1.3 文件IO</h2><ol><li><code>:w</code> 保存文件</li><li><code>:wq</code> 保存文件并退出</li><li><code>:q!</code> 强制退出</li></ol><h1 id="2-基本字符和单词操作"><a href="#2-基本字符和单词操作" class="headerlink" title="2 基本字符和单词操作"></a>2 基本字符和单词操作</h1><h2 id="2-1-基本定位操作"><a href="#2-1-基本定位操作" class="headerlink" title="2.1 基本定位操作"></a>2.1 基本定位操作</h2><ol><li><p><code>j</code>、<code>k</code>、<code>h</code>、<code>l</code>：这些是光标移动操作。</p><ul><li><code>j</code>：向下移动一行。</li><li><code>k</code>：向上移动一行。</li><li><code>h</code>：向左移动一个字符。</li><li><code>l</code>：向右移动一个字符。</li></ul></li><li><p><code>w</code> 向前移动一个单词。按下<code>w</code>键会将光标移动到下一个单词的开头。</p></li><li><p><code>b</code> 向后移动一个单词。按下<code>b</code>键会将光标移动到前一个单词的开头。</p></li><li><p><code>e</code> 移动到单词的末尾。按下<code>e</code>键会将光标移动到当前单词的末尾。</p></li><li><p><code>0</code> 移动到行的开头。按下<code>0</code>键会将光标移动到当前行的开头。</p></li><li><p><code>$</code> 移动到行的末尾。按下<code>$</code>键会将光标移动到当前行的末尾。</p></li><li><p><code>^</code> 移动到行的第一个非空字符。按下<code>^</code>键会将光标移动到当前行的第一个非空字符处。</p></li><li><p><code>Ctrl-d</code> 向下滚动半屏。按下<code>Ctrl-d</code>键会将屏幕内容向下滚动半个屏幕。</p></li><li><p><code>Ctrl-u</code> 向上滚动半屏。按下<code>Ctrl-u</code>键会将屏幕内容向上滚动半个屏幕。</p></li><li><p><code>G</code> 移动到文件的最后一行。按下<code>G</code>键会将光标移动到文件的最后一行。</p></li><li><p><code>gg</code> 移动到文件的第一行。按下<code>gg</code>键会将光标移动到文件的第一行。</p></li><li><p><code>L</code> 将光标移动到屏幕的底部行。</p></li><li><p><code>M</code> 将光标移动到屏幕的中间行。</p></li><li><p><code>H</code> 将光标移动到屏幕的顶部行。</p></li></ol><h2 id="2-2-组合定位"><a href="#2-2-组合定位" class="headerlink" title="2.2 组合定位"></a>2.2 组合定位</h2><p>在Vim中，<code>f</code>、<code>F</code>、<code>t</code>和<code>T</code>是用于在当前行内搜索字符的命令，结合它们可以实现各种组合操作。以下是这些命令的详细解释 </p><ol><li><p><code>f&#123;char&#125;</code>：在当前行内查找下一个出现的字符<code>&#123;char&#125;</code>，光标会停在找到的字符上。例如，如果你想查找下一个出现的字母<code>a</code>，可以按下<code>fa</code>。</p></li><li><p><code>F&#123;char&#125;</code>：在当前行内查找上一个出现的字符<code>&#123;char&#125;</code>，光标会停在找到的字符上。例如，如果你想查找上一个出现的字母<code>a</code>，可以按下<code>Fa</code>。</p></li><li><p><code>t&#123;char&#125;</code>：在当前行内查找下一个出现的字符<code>&#123;char&#125;</code>，光标会停在找到的字符前一个位置。例如，如果你想查找下一个出现的字母<code>a</code>，可以按下<code>ta</code>。</p></li><li><p><code>T&#123;char&#125;</code>：在当前行内查找上一个出现的字符<code>&#123;char&#125;</code>，光标会停在找到的字符前一个位置。例如，如果你想查找上一个出现的字母<code>a</code>，可以按下<code>Ta</code>。</p></li></ol><p>这些命令通常与其他操作一起使用，以便在文本中快速导航和编辑。例如，如果你想删除从光标位置到下一个出现字母<code>a</code>的字符之间的文本，你可以使用<code>dt&#123;char&#125;</code>，其中<code>&#123;char&#125;</code>是你想要删除的字符。这些命令的组合允许你在Vim中以精确的方式执行各种文本编辑任务。</p><h1 id="3-插入与删除"><a href="#3-插入与删除" class="headerlink" title="3 插入与删除"></a>3 插入与删除</h1><h2 id="3-1-基本插入"><a href="#3-1-基本插入" class="headerlink" title="3.1 基本插入"></a>3.1 基本插入</h2><ol><li><p><code>i</code>：进入插入模式。按下<code>i</code>键会使光标位于当前位置，你可以在光标前插入文本。</p></li><li><p><code>I</code>：进入插入模式并移到行首。按下<code>I</code>键会将光标移到当前行的第一个非空字符位置，然后你可以开始插入文本。</p></li><li><p><code>a</code>：进入插入模式并移到光标后面。按下<code>a</code>键会使光标位于当前位置的下一个字符后面，你可以在光标后插入文本。</p></li><li><p><code>A</code>：进入插入模式并移到行尾。按下<code>A</code>键会将光标移到当前行的末尾，你可以在行尾插入文本。</p></li><li><p><code>o</code>：在下面插入新行并进入插入模式。按下<code>o</code>键会在当前行的下面插入一个新的空行，并将光标移动到新行的起始位置，你可以在新行中插入文本。</p></li><li><p><code>O</code>：在上面插入新行并进入插入模式。按下<code>O</code>键会在当前行的上面插入一个新的空行，并将光标移动到新行的起始位置，你可以在新行中插入文本。</p></li></ol><p>这些命令允许你在插入模式中灵活地编辑文本。你可以使用它们来快速插入、编辑和调整文本，提高编辑效率。要退出插入模式并返回正常模式，只需按下<code>Esc</code>键。</p><h2 id="3-2-基本删除"><a href="#3-2-基本删除" class="headerlink" title="3.2 基本删除"></a>3.2 基本删除</h2><ol><li><p><code>x</code>：删除光标下的字符。按下<code>x</code>键会删除光标所在位置的字符。</p></li><li><p><code>X</code>：删除光标前面的字符。按下<code>X</code>键会删除光标前一个位置的字符。</p></li><li><p><code>dd</code>：删除当前行。按下<code>dd</code>键会删除光标所在行的所有内容，并将其剪切到剪贴板。</p></li><li><p><code>D</code>：删除从光标位置到行尾的内容。按下<code>D</code>键会删除从光标位置到行尾的所有字符。</p></li><li><p><code>dw</code>：删除从光标位置到下一个单词的开头。按下<code>dw</code>键会删除从光标位置到下一个单词的开头的所有字符。</p></li><li><p><code>de</code>：de命令将删除光标位置到当前单词的末尾的文本，包括当前单词的最后一个字符。这个命令通常用于删除一个单词的内容。</p></li><li><p><code>db</code>：删除从光标位置到前一个单词的开头。按下<code>db</code>键会删除从光标位置到前一个单词的开头的所有字符。</p></li><li><p><code>:n1,n2d</code>：删除从行号<code>n1</code>到行号<code>n2</code>的所有行。例如，<code>:1,5d</code>会删除第1行到第5行的所有行。</p></li><li><p><code>:d&#123;n&#125;</code>：删除第<code>n</code>行。例如，<code>:d10</code>会删除第10行。</p></li><li><p><code>dG</code>：删除从光标位置到文件末尾的所有行。</p></li><li><p><code>dgg</code>：删除从光标位置到文件开头的所有行。</p></li><li><p><code>:1,$d</code>：删除整个文件的内容。</p></li></ol><p>这些是一些基本的删除命令，它们可以帮助你在Vim中快速删除文本。请注意，删除的文本通常会被复制到剪贴板，因此可以使用粘贴命令（如<code>p</code>）将其恢复到其他位置。如果你需要撤销删除操作，可以使用撤销命令（如<code>u</code>）来撤销最后的编辑操作。</p><h2 id="3-3-基本替换"><a href="#3-3-基本替换" class="headerlink" title="3.3 基本替换"></a>3.3 基本替换</h2><p>在Vim中，替换命令是用于替换文本的关键操作之一。<code>c</code>命令（”change”）是用于删除并进入插入模式的命令，通常与其他操作一起使用来替换文本。以下是基本的替换命令以及与<code>c</code>命令相关的一些衍生命令和组合：</p><ol><li><p><code>c&#123;motion&#125;</code>：使用<code>c</code>命令可以替换<code>&#123;motion&#125;</code>范围内的文本。例如：</p><ul><li><code>cw</code>：替换当前单词。</li><li><code>c2w</code>：替换下两个单词。</li><li><code>c$</code>：替换光标位置到行尾的文本。</li></ul></li><li><p><code>cc</code>：替换整行。按下<code>cc</code>键会删除当前行并进入插入模式，允许你替换整行文本。</p></li><li><p><code>C</code>：替换从光标位置到行尾的文本。按下<code>C</code>键会删除从光标位置到行尾的文本并进入插入模式。</p></li><li><p><code>s</code>：替换当前字符。按下<code>s</code>键会删除光标下的字符并进入插入模式，允许你替换当前字符。</p></li><li><p><code>S</code>：替换整行。按下<code>S</code>键会删除整行并进入插入模式，允许你替换整行文本。</p></li><li><p><code>r&#123;char&#125;</code>：这是一个简单的字符替换命令。按下<code>r</code>键后，再紧跟一个字符<code>&#123;char&#125;</code>，会将光标下的当前字符替换为指定的字符。例如，如果你想将当前字符替换为<code>x</code>，只需按下<code>rx</code>。替换完成后，光标会自动移动到下一个字符。这是一个快速替换单个字符的方式。</p></li><li><p><code>R</code>：这是替换模式命令。按下<code>R</code>键后，会进入替换模式，此时你可以连续输入字符，替换光标所在位置及其后续字符。替换模式允许你在一段文本中进行逐字符替换，直到你按下<code>Esc</code>键退出替换模式。这对于逐字符编辑文本非常有用。</p></li><li><p><code>:s/&#123;pattern&#125;/&#123;replacement&#125;/g</code>：使用替换命令来替换所有匹配<code>&#123;pattern&#125;</code>的文本。例如，<code>:s/old/new/g</code>会将所有匹配<code>old</code>的文本替换为<code>new</code>。</p></li><li><p><code>:s/&#123;pattern&#125;/&#123;replacement&#125;/gc</code>：与上述命令类似，但会在替换前要求确认。你可以选择是否替换每个匹配项。</p></li><li><p><code>:%s/&#123;pattern&#125;/&#123;replacement&#125;/g</code>：在整个文件中替换所有匹配<code>&#123;pattern&#125;</code>的文本。注意，正则表达式中的特殊字符需要使用<code>\</code>转义。</p></li></ol><h2 id="3-4-复制和粘贴"><a href="#3-4-复制和粘贴" class="headerlink" title="3.4 复制和粘贴"></a>3.4 复制和粘贴</h2><ol><li><code>y</code> 复制当前字符</li><li><code>yy</code> 负责一整行</li><li><code>yw</code> 复制一个单词</li><li><code>y2w</code> 复制2个单词</li><li><code>p</code> 粘贴</li></ol><h1 id="4-查找内容和替换"><a href="#4-查找内容和替换" class="headerlink" title="4 查找内容和替换"></a>4 查找内容和替换</h1><h2 id="4-1-查找"><a href="#4-1-查找" class="headerlink" title="4.1 查找"></a>4.1 查找</h2><ol><li>查找指定内容</li></ol><ul><li>向后查找内容 <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*** <span class="built_in">search</span> <span class="keyword">for</span> content***</span><br></pre></td></tr></table></figure>n 查找下一个<br>N 查找上一个 <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 向前查找内容</span><br><span class="line">?*** <span class="built_in">search</span> <span class="keyword">for</span> content***</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>辅助查找指令 <ol><li><code>c-G</code> 查看当前位置信息</li><li><code>*G</code> 向前查找内容</li></ol></li></ol><h2 id="4-2-查找并替换"><a href="#4-2-查找并替换" class="headerlink" title="4.2 查找并替换"></a>4.2 查找并替换</h2><ol><li><code>:s/&#123;&#123;old&#125;&#125;/&#123;&#123;new&#125;&#125;</code> 用new替换old,普通替换, 替换范围为当前行的第一个</li><li><code>:s/&#123;&#123;old&#125;&#125;/&#123;&#123;new&#125;&#125;</code> 用new替换old,普通替换, 替换范围为当前行的所有</li><li><code>:%s/&#123;&#123;old&#125;&#125;/&#123;&#123;new&#125;&#125;/g</code> 用new替换old,普通替换, 替换范围为所有文档范围</li><li><code>:%s/&#123;&#123;old&#125;&#125;/&#123;&#123;new&#125;&#125;/gc</code> 用new替换old,普通替换, 替换范围为所有文档范围, 并在每一次替换时进行确认</li><li><code>:&#123;&#123;#&#125;&#125;,&#123;&#123;#&#125;&#125;s/old/new/g</code> <code>#</code>指定了替换操的行范围</li></ol><h1 id="5-组合操作"><a href="#5-组合操作" class="headerlink" title="5 组合操作"></a>5 组合操作</h1><h2 id="5-1-跳转组合命令"><a href="#5-1-跳转组合命令" class="headerlink" title="5.1 跳转组合命令"></a>5.1 跳转组合命令</h2><ol><li><code>c-o</code> 返回上一个位置</li><li><code>c-i</code> 重新跳转到某位置</li></ol><h2 id="5-2-基本命令组合"><a href="#5-2-基本命令组合" class="headerlink" title="5.2 基本命令组合"></a>5.2 基本命令组合</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span><span class="keyword">j</span> 向下移动<span class="number">10</span>次</span><br><span class="line"><span class="number">10</span>de 向后删除<span class="number">10</span>个单词</span><br><span class="line">c2w 向后删除<span class="number">2</span>个单词并进入编辑模式</span><br></pre></td></tr></table></figure><h2 id="5-3-括号组合操作"><a href="#5-3-括号组合操作" class="headerlink" title="5.3 括号组合操作"></a>5.3 括号组合操作</h2><p>对于常见的括号包括 [], {}, (), &lt;&gt;, “”, ‘’<br>以{}为例:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`ci&#123;` 删除&#123;&#125;内的内容并进入编辑模式</span><br><span class="line">`<span class="keyword">di</span>&#123;` 删除&#123;&#125;内的内容</span><br></pre></td></tr></table></figure><h1 id="6-Visual-mode-操作"><a href="#6-Visual-mode-操作" class="headerlink" title="6 Visual mode 操作"></a>6 Visual mode 操作</h1><ol><li><code>v</code> 进入模式</li><li><code>V</code> 选择整行</li><li><code>~</code>:反转大小写</li></ol><h1 id="7-其他操作"><a href="#7-其他操作" class="headerlink" title="7 其他操作"></a>7 其他操作</h1><h2 id="7-1-导入其他文件内容"><a href="#7-1-导入其他文件内容" class="headerlink" title="7.1 导入其他文件内容"></a>7.1 导入其他文件内容</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:r filename</span><br></pre></td></tr></table></figure><p>将导入 filename 指定文件的内容</p><h2 id="7-2-配置项设置"><a href="#7-2-配置项设置" class="headerlink" title="7.2 配置项设置"></a>7.2 配置项设置</h2><ol><li><code>:set nu</code> 显示行号</li><li><code>:set nonu</code> 取消显示行号</li><li><code>:set ic</code> 输入时忽略大小写</li><li><code>:set noic</code> 取消输入时忽略大小写</li><li><code>:set hls is</code> 高亮匹配查找的内容</li><li><code>:nohlsearch</code> 取消高亮匹配查找的内容</li><li><code>:set nocp</code> 确保vim没有在兼容模式</li></ol><h2 id="7-3-执行命令行命令"><a href="#7-3-执行命令行命令" class="headerlink" title="7.3 执行命令行命令"></a>7.3 执行命令行命令</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:! <span class="keyword">command</span></span><br></pre></td></tr></table></figure><p>执行<code>command</code>操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-打开-关闭&quot;&gt;&lt;a href=&quot;#1-打开-关闭&quot; class=&quot;headerlink&quot; title=&quot;1 打开&amp;#x2F;关闭&quot;&gt;&lt;/a&gt;1 打开&amp;#x2F;关闭&lt;/h1&gt;&lt;h2 id=&quot;1-1-标签页操作&quot;&gt;&lt;a href=&quot;#1-1-标签页操作&quot; cla</summary>
      
    
    
    
    <category term="实用工具" scheme="http://example.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="vim" scheme="http://example.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>WSL入门到入土</title>
    <link href="http://example.com/2023/12/23/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/wsl%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2023/12/23/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/wsl%E4%BD%BF%E7%94%A8/</id>
    <published>2023-12-23T14:04:07.000Z</published>
    <updated>2023-12-23T16:45:33.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-wsl是什么"><a href="#1-wsl是什么" class="headerlink" title="1 wsl是什么?"></a>1 wsl是什么?</h1><p><code>wsl</code>的官方文档点这里: <a href="https://learn.microsoft.com/zh-cn/windows/wsl/">https://learn.microsoft.com/zh-cn/windows/wsl/</a><br>官方称之为<code>适用于 Linux 的 Windows 子系统文档</code>, 我们把他当成一个和<code>windows</code>为什么我们要使用wsl呢？对于我个人而言，<code>wsl</code>相比<code>VMWarwe</code>存在如下几个优势：</p><ol><li>文件与环境共享<br><code>WSL</code> 与 <code>Windows</code> 系统紧密集成，允许用户在 <code>Windows</code> 和 <code>Linux</code> 系统之间无缝地运行命令和程序，共享文件系统，甚至可以在 <code>Windows</code> 中运行 Linux 应用。例如, 你可以在<code>wsl</code>中使用<code>explorer.exe .</code>使用资源管理器打开虚拟机中的文件夹。你可以使用<code>mnt/</code>路径访问宿主机文件系统等待。</li><li>VSCode完美兼容<br>VSCode的插件完美兼容wsl， 你可以在wsl的终端输入<code>code .</code>直接唤起VSCode, 此外Docker Desktop也使用wsl2作为后端</li><li>支持CUDA<br>NVIDIA官方提供了wsl的cuda程序包, 这意味着可以在wsl中运行各种主流的深度学习框架, 如Pytorch和TensorFlow</li><li>轻量<br>相比<code>VMWarwe</code>, wsl消耗的系统资源更少, <del>甚至可以开着wsl打FIFA</del></li></ol><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><h2 id="2-1-前置要求"><a href="#2-1-前置要求" class="headerlink" title="2.1 前置要求"></a>2.1 前置要求</h2><h3 id="2-1-1-启用Windows功能"><a href="#2-1-1-启用Windows功能" class="headerlink" title="2.1.1 启用Windows功能"></a>2.1.1 启用Windows功能</h3><p>系统搜索<strong>启用或关闭Windows功能</strong>，如下图开启功能<br><img src="/../../images/enable_win_func.png" alt="en../imagesble_win_func"></p><h3 id="2-1-2-BIOS开启CPU虚拟化功能"><a href="#2-1-2-BIOS开启CPU虚拟化功能" class="headerlink" title="2.1.2 BIOS开启CPU虚拟化功能"></a>2.1.2 BIOS开启CPU虚拟化功能</h3><p>不同的主板厂商BIOS界面设置不同，大体上的位置可参考下图<br><img src="/../../images/enable-virtualization.png" alt="enable-virtualization"></p><h2 id="2-2-下载Linux-内核更新包-可选"><a href="#2-2-下载Linux-内核更新包-可选" class="headerlink" title="2.2 下载Linux 内核更新包(可选)"></a>2.2 下载Linux 内核更新包(可选)</h2><p>如果后续操作失败了, 需要下载Linux 内核更新包: <a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package">https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package</a></p><h2 id="2-3-安装指令"><a href="#2-3-安装指令" class="headerlink" title="2.3 安装指令"></a>2.3 安装指令</h2><p>参考 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a> 即可, 简单说就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br><span class="line">wsl --install</span><br><span class="line"></span><br><span class="line">安装 WSL 默认版本和默认 Linux 发行版。</span><br><span class="line">wsl --list [--online]</span><br><span class="line"><span class="comment"># 列出已安装的 Linux 发行版，使用 --online 参数可显示可供安装的发行版列表。</span></span><br><span class="line"></span><br><span class="line">wsl --set-default &lt;DistributionName&gt;</span><br><span class="line"><span class="comment"># 设置默认的 Linux 发行版。</span></span><br></pre></td></tr></table></figure><p>其中, <code>--</code>参数都可以用<code>-</code>加首字母代替。<br>另外， win10环境下强推<a href="https://learn.microsoft.com/zh-cn/windows/terminal/install">Windows 终端</a></p><h1 id="3-基本命令"><a href="#3-基本命令" class="headerlink" title="3 基本命令"></a>3 基本命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br><span class="line"><span class="comment"># 启动默认的 Linux 发行版的默认 shell。</span></span><br><span class="line"></span><br><span class="line">wsl &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"><span class="comment"># 在默认的 Linux 发行版中运行指定的命令。</span></span><br><span class="line"></span><br><span class="line">wsl -d &lt;DistributionName&gt;</span><br><span class="line"><span class="comment"># 启动指定的 Linux 发行版。</span></span><br><span class="line"><span class="comment"># 实际上, 使用`Windows 终端`直接拉选项卡是最常用的方法</span></span><br><span class="line"></span><br><span class="line">wsl -u &lt;UserName&gt;</span><br><span class="line"><span class="comment"># 以指定的用户身份启动 WSL。</span></span><br><span class="line"></span><br><span class="line">wsl --set-version &lt;DistributionName&gt; &lt;VersionNumber&gt;</span><br><span class="line"><span class="comment"># 设置指定发行版的 WSL 版本（如 wsl --set-version Ubuntu 2 切换到 WSL 2）。</span></span><br><span class="line"></span><br><span class="line">wsl --shutdown</span><br><span class="line"><span class="comment"># 立即终止所有运行的 WSL Linux 发行版并关闭虚拟机。</span></span><br><span class="line"></span><br><span class="line">wsl --unregister &lt;DistributionName&gt;</span><br><span class="line"><span class="comment"># 注销并删除指定的 Linux 发行版, 同时会删除磁盘文件。</span></span><br><span class="line"></span><br><span class="line">wsl --update</span><br><span class="line"><span class="comment"># 更新 WSL 的 Linux 内核。</span></span><br><span class="line"></span><br><span class="line">wsl --status</span><br><span class="line"><span class="comment"># 显示 WSL 的状态以及默认的 WSL 版本和发行版。</span></span><br><span class="line"></span><br><span class="line">wsl --<span class="built_in">help</span></span><br><span class="line"><span class="comment"># 显示所有可用的 WSL 命令和用法选项。</span></span><br></pre></td></tr></table></figure><h1 id="4-网络配置"><a href="#4-网络配置" class="headerlink" title="4 网络配置"></a>4 网络配置</h1><h2 id="4-1-代理设置"><a href="#4-1-代理设置" class="headerlink" title="4.1 代理设置"></a>4.1 代理设置</h2><p>设置代理只需要导出环境变量即可, 以<code>Clash</code>代理的7890端口为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:7890</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>类似的, 可以使用如下命令配置git代理:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="variable">$&#123;PROXY_HTTP&#125;</span></span><br><span class="line">git config --global https.proxy <span class="variable">$&#123;PROXY_HTTP&#125;</span></span><br></pre></td></tr></table></figure><p>如同Linux物理机一样, 在<code>.bashrc</code>中配置环境变量即可永久生效</p><h2 id="4-2-固定IP"><a href="#4-2-固定IP" class="headerlink" title="4.2 固定IP"></a>4.2 固定IP</h2><p>默认情况下, WSL实例的 IP 地址不是固定的。每次 WSL 实例启动时，它通常会从 Windows 主机的一个虚拟网络适配器获得一个新的 IP 地址。这个虚拟网络适配器充当 DHCP 服务器，为 WSL 实例分配 IP 地址。<br>最常用的方案是与宿主机共享IP, 这可以通过配置<code>wslconfig文件</code>做到:<br>在用户目录下的<code>.wslconfig文件</code>中添加如下内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[experimental]</span><br><span class="line">networkingMode=mirrored</span><br><span class="line">dnsTunneling=true</span><br><span class="line">firewall=true</span><br><span class="line">autoProxy=true</span><br></pre></td></tr></table></figure><p>此后启动wsl, 其与 <code>Windows</code> 主机的网络互通而且 IP 地址相同了</p><p>另外还有别的方式固定IP</p><ol><li>使用桥接模式, 参考这篇文章: <a href="https://blog.csdn.net/keyiis_sh/article/details/113819244">https://blog.csdn.net/keyiis_sh/article/details/113819244</a></li><li>配置虚拟网络, 参考这篇文章: <a href="http://www.manongjc.com/detail/28-qmgskvmcxbjzfaj.html">http://www.manongjc.com/detail/28-qmgskvmcxbjzfaj.html</a></li></ol><h2 id="4-3-端口映射"><a href="#4-3-端口映射" class="headerlink" title="4.3 端口映射"></a>4.3 端口映射</h2><p>端口映射命令如下:<br>建立映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=80 listenaddress=0.0.0.0 connectport=80 connectaddress=172.29.41.233</span><br></pre></td></tr></table></figure><p>其中<code>172.29.41.233</code>是wsl中的ip地址, 第一个80表示宿主机端口,第二个80表示wsl端口</p><p>查看已有的映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><p>移除映射:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=80 listenaddress=0.0.0.0</span><br></pre></td></tr></table></figure><h1 id="5-磁盘管理"><a href="#5-磁盘管理" class="headerlink" title="5 磁盘管理"></a>5 磁盘管理</h1><h2 id="5-1-安装或迁移wsl到其他磁盘"><a href="#5-1-安装或迁移wsl到其他磁盘" class="headerlink" title="5.1 安装或迁移wsl到其他磁盘"></a>5.1 安装或迁移wsl到其他磁盘</h2><p>wsl默认安装在C盘, …<br>WSL会在宿主机上创建一个虚拟硬盘文件（通常是一个名为 ext4.vhdx 的文件），用于存储 Linux 发行版的文件系统, 而这个文件貌似是以追加写入的方式运行的, 因此容量会越来越大。<strong>因此将其安装在非系统盘是十分必要的。</strong><br>最简单的方式是手动迁移vhdx文件，注销Linux发行版， 再重新导入。<strong>此操作对于老旧版本的wsl是不适用的！</strong></p><ul><li><strong>方法1 直接迁移ext4.vhdx文件</strong><br>例如， 我的wsl文件位于<code>&quot;C:\Ubuntu-20.04\ext4.vhdx&quot;</code>下, 先进行如下操作</li></ul><ol><li>复制<code>ext4.vhdx</code>文件到指定路径<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> <span class="string">&quot;C:\Ubuntu-20.04\ext4.vhdx&quot;</span> &lt;targetPath&gt;</span><br></pre></td></tr></table></figure></li><li>注销对应的发行版<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-20.04</span><br></pre></td></tr></table></figure></li><li>重新导入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import-in-place Ubuntu-20.04 &lt;targetPath&gt;</span><br></pre></td></tr></table></figure></li></ol><p>这时wsl发行版已经被迁移到其他磁盘了, 这种方法的优势是原位导入, 也就是<code>&lt;targetPath&gt;</code>就是wsl真正的磁盘文件了, 不过确定是只能用于<code>ext4</code> 文件系统类型格式。</p><ul><li><strong>方法2 导出镜像</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> &lt;Distribution Name&gt; &lt;FileName&gt;</span><br><span class="line"><span class="comment"># 导出:</span></span><br><span class="line"></span><br><span class="line">wsl --import &lt;Distribution Name&gt; &lt;InstallLocation&gt; &lt;FileName&gt;</span><br><span class="line"><span class="comment"># 导入</span></span><br></pre></td></tr></table></figure>通过<code>--import</code>可以看出, 这种方法是将<FileName><code>安装</code>到了<code>&lt;InstallLocation&gt;</code>, 可以看作多复制了一份, 因此如果我们的wsl无比庞大时, 这样的操作是很费时间的</li></ul><h2 id="5-2-清理vhdx磁盘空间"><a href="#5-2-清理vhdx磁盘空间" class="headerlink" title="5.2 清理vhdx磁盘空间"></a>5.2 清理vhdx磁盘空间</h2><p>如前文所述, WSL 不会自动收缩vhdx文件的大小, 我们需要手动压缩:<br>使用管理员打开<code>powershell</code>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭WSL</span></span><br><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 打开Diskpart窗口</span></span><br><span class="line">diskpart</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">select</span> vdisk file=<span class="string">&quot;path to ext4.vhdx&quot;</span></span><br><span class="line"> </span><br><span class="line">attach vdisk readonly</span><br><span class="line">compact vdisk</span><br><span class="line">detach vdisk</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h1 id="6-安装CUDA"><a href="#6-安装CUDA" class="headerlink" title="6 安装CUDA"></a>6 安装CUDA</h1><p>此过程较为繁琐, 且方案迭代过快, 因此给出官方文档: <a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">https://docs.nvidia.com/cuda/wsl-user-guide/index.html</a><br>以下的过程仅供参考:</p><ol><li><p>确保Windows中安装了NVIDIA的显卡驱动(不需要安装cuda)</p></li><li><p>在官网下载适用于wsl的cuda toolkit,<br>网址: <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=deb_local">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local</a></p><p>如下选择:</p><p><img src="/../../images/wsl-cuda.png" alt="wsl-cuda"></p></li><li><p>安装官网指令进行安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin</span><br><span class="line">sudo <span class="built_in">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/12.3.1/local_installers/cuda-repo-wsl-ubuntu-12-3-local_12.3.1-1_amd64.deb</span><br><span class="line">sudo dpkg -i cuda-repo-wsl-ubuntu-12-3-local_12.3.1-1_amd64.deb</span><br><span class="line">sudo <span class="built_in">cp</span> /var/cuda-repo-wsl-ubuntu-12-3-<span class="built_in">local</span>/cuda-*-keyring.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cuda-toolkit-12-3</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-第三方工具LxRunOffline"><a href="#7-第三方工具LxRunOffline" class="headerlink" title="7 第三方工具LxRunOffline"></a>7 第三方工具LxRunOffline</h1><p><code>LxRunOffline</code>是第三方的wsl管理工具,其能更方便我们管理wsl, 例如修改登录用户、安装非微软官方提供的Linux发行版等</p><p>Github仓库： <a href="https://github.com/DDoSolitary/LxRunOffline">https://github.com/DDoSolitary/LxRunOffline</a><br>下载地址： <a href="https://github.com/DDoSolitary/LxRunOffline/releases">https://github.com/DDoSolitary/LxRunOffline/releases</a></p><p>安装建议下载编译好的二进制文件，较为简单就不演示了, 此处介绍其核心功能</p><ol><li><p><code>LxRunOffline</code>最主要的作用就是安装非微软官方提供的Linux发行版:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LxRunOffline i -n archlinux -f &#123;发行版镜像位置&#125;  -d  &lt;安装系统的位置&gt; [-r 附加参数]</span><br></pre></td></tr></table></figure><p>具体的发行版安装看这里: <a href="https://github.com/DDoSolitary/LxRunOffline/wiki">https://github.com/DDoSolitary/LxRunOffline/wiki</a><br>例如这篇文章介绍了如何使用<code>LxRunOffline</code>安装<code>arch</code>: <a href="https://zhuanlan.zhihu.com/p/417410431">https://zhuanlan.zhihu.com/p/417410431</a></p></li><li><p>修改默认登录用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lxrunoffline su -n &lt;发行版名字&gt; -v &lt;账户<span class="built_in">id</span>&gt;</span><br><span class="line">```   </span><br><span class="line">其中`&lt;账户<span class="built_in">id</span>&gt;`可以在`Linux`中通过`<span class="built_in">id</span>`命令查询:</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">id</span> -u 用户名</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/">https://learn.microsoft.com/zh-cn/windows/wsl/</a><br><a href="https://www.cnblogs.com/tuilk/p/16287472.html">https://www.cnblogs.com/tuilk/p/16287472.html</a><br><a href="https://zhuanlan.zhihu.com/p/659074950">https://zhuanlan.zhihu.com/p/659074950</a><br><a href="https://blog.csdn.net/u014752296/article/details/128484185">https://blog.csdn.net/u014752296/article/details/128484185</a><br><a href="https://zhuanlan.zhihu.com/p/417410431">https://zhuanlan.zhihu.com/p/417410431</a><br><a href="https://blog.csdn.net/m0_37605642/article/details/127812965">https://blog.csdn.net/m0_37605642/article/details/127812965</a><br><a href="https://zhuanlan.zhihu.com/p/165508059">https://zhuanlan.zhihu.com/p/165508059</a><br><a href="http://www.manongjc.com/detail/28-qmgskvmcxbjzfaj.html">http://www.manongjc.com/detail/28-qmgskvmcxbjzfaj.html</a><br><a href="https://www.cnblogs.com/trendyshuai/p/17018012.html">https://www.cnblogs.com/trendyshuai/p/17018012.html</a><br><a href="https://blog.csdn.net/keyiis_sh/article/details/113819244">https://blog.csdn.net/keyiis_sh/article/details/113819244</a><br><a href="https://blog.csdn.net/qq_32666519/article/details/127378873">https://blog.csdn.net/qq_32666519/article/details/127378873</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-wsl是什么&quot;&gt;&lt;a href=&quot;#1-wsl是什么&quot; class=&quot;headerlink&quot; title=&quot;1 wsl是什么?&quot;&gt;&lt;/a&gt;1 wsl是什么?&lt;/h1&gt;&lt;p&gt;&lt;code&gt;wsl&lt;/code&gt;的官方文档点这里: &lt;a href=&quot;https://l</summary>
      
    
    
    
    <category term="实用工具" scheme="http://example.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="wsl" scheme="http://example.com/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.8540 Lab1: MapReduce</title>
    <link href="http://example.com/2023/12/23/MIT6.8540/Lab1_MapReduce/"/>
    <id>http://example.com/2023/12/23/MIT6.8540/Lab1_MapReduce/</id>
    <published>2023-12-23T05:25:18.000Z</published>
    <updated>2023-12-23T18:04:01.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-实验介绍"><a href="#1-实验介绍" class="headerlink" title="1 实验介绍"></a>1 实验介绍</h1><p>本次实验是实现一个简易版本的<code>MapReduce</code>编程框架,官方文档在这里:<a href="https://pdos.csail.mit.edu/6.824/labs/lab-mr.html">lab1文档</a>, 强烈建议先阅读<code>MapReduce</code>的<a href="https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf">论文</a>, 难度主要体现在设计上, 实际的代码实现倒是相对简单, 这也得益于<code>go</code>的语言特性, 比<code>CMU15445</code>使用Cpp写代码方便多了。实验需要实现的是<code>Coordinator</code>和<code>Worker</code>的设计, 具体实现细节十分自由(<del>无从下手</del>)</p><p>我的代码实现点这里： <a href="https://github.com/ToniXWD/MIT6.8540/tree/lab1">https://github.com/ToniXWD/MIT6.8540/tree/lab1</a></p><h1 id="2-既有框架解读"><a href="#2-既有框架解读" class="headerlink" title="2 既有框架解读"></a>2 既有框架解读</h1><p>解读现有的框架设计是第一步。</p><h2 id="2-1-代码解读"><a href="#2-1-代码解读" class="headerlink" title="2.1 代码解读"></a>2.1 代码解读</h2><ol><li>阅读<code>src/main/mrcoordinator.go</code>可知：<br> 服务进程通过<code>MakeCoordinator</code>启动了一个<code>Coordinator</code> c, <code>c.server()</code>中启用了一个协程用于接受<code>RPC</code>调用:<code>go http.Serve(l, nil)</code>, 需要注意的是, 在 Go 的 <code>net/http</code> 包中, 使用 <code>http.Serve(l, nil)</code> 启动 <code>HTTP</code> 服务器以侦听和处理请求时，服务器会为每个进来的请求自动启动一个新的协程。这意味着每个 RPC 调用都是在其自己的独立协程中被处理的，允许并发处理多个请求。因此, 我们的设计可能需要使用锁等同步原语实现共享资源的保护, 同时<code>Coordinator</code>不会主动与<code>Worker</code>通信(除非自己额外实现), 只能通过<code>Worker</code>的<code>RPC</code>通信来完成任务。同时， 当所有任务完成时， <code>Done</code>方法将会返回<code>false</code>, 从而将<code>Coordinator</code>关闭。</li><li>阅读<code>src/main/mrworker.go</code><br>可以得知，<code>mrworker.go</code>仅仅通过<code>Worker</code>函数来运行, 因此<code>Worker</code>函数需要完成请求任务、执行任务、报告任务执行状态等多种任务。因此可以猜测，Worker需要再这个函数里不断地轮训<code>Coordinator</code>，根据<code>Coordinator</code>的不同回复驱使当前<code>Worker</code>完成各种任务。</li></ol><h2 id="2-2-任务误区解读"><a href="#2-2-任务误区解读" class="headerlink" title="2.2 任务误区解读"></a>2.2 任务误区解读</h2><ol><li><p><code>Map</code>、<code>Reduce</code>任务、<code>Coordinator</code>和<code>Worker</code>的关系如何?<br>这些任务(文中此后称为<code>Task</code>)与<code>Worker</code>是什么关系呢? 是否存在对应关系? 这些对应关系需要记录吗? 通常, 在常见的主从关系中, 主节点需要记录从节点的信息,例如线程id等表名身份的信息, 但在我们的<code>MapReduce</code>中却没有这样的必要, 因为<code>Worker</code>节点是可以扩容的, 而<code>Coordinator</code>与<code>Worker</code>之间只有传递<code>Task</code>相关信息的需求, 因此<code>Coordinator</code>只需要记录<code>Task</code>任务的状态即可, <code>Task</code>分配给<code>Worker</code>后执行可能成功或失败, 因此<code>Coordinator</code>还需要维护任务执行的时间信息, 以便在超时后重新分配任务。因此，<code>Map</code>、<code>Reduce</code>任务、<code>Coordinator</code>和<code>Worker</code>的关系可以参考下图:</p><p><img src="/../../images/MapReduce%E4%BB%BB%E5%8A%A1%E5%85%B3%E7%B3%BB.png" alt="MapReduce_relation"></p><p> <code>Worker</code>可能在不同时间执行不同的<code>Task</code>, 也可能什么也不做(初始状态或等候所有<code>Map Task</code>完成时可能会闲置)</p></li><li><p><code>Map</code>、<code>Reduce</code>任务有多少个? 如何分配?</p><ul><li><code>Map Task</code>实际上在此实验中被简化了, 每个<code>Map Task</code>的任务就是处理一个<code>.txt</code>文件, 因此<code>Map Task</code>的数量实际上就是<code>.txt</code>文件的数量。 因此, 每个<code>.txt</code>文件对应的<code>Map Task</code>需要<code>Coordinator</code>记录其执行情况并追踪。</li><li><code>Reduce Task</code>的数量是<code>nReduce</code>。由于<code>Map Task</code>会将文件的内容分割为指定的<code>nReduce</code>份, 每一份应当由序号标明, 拥有这样的序号的多个<code>Map Task</code>的输出汇总起来就是对应的<code>Reduce Task</code>的输入。</li></ul></li><li><p>中间文件的格式是怎么样的? <code>Reduce</code>任务如何选择中间文件作为输入?<br>因为<code>Map Task</code>分割采用的是统一的哈希函数<code>ihash</code>, 所以相同的<code>key</code>一定会被<code>Map Task</code>输出到格式相同的中间文件上。例如在<code>wc</code>任务中, <code>Map Task 1</code>和<code>Map Task 2</code>输入文件中都存在<code>hello</code>这个词, <code>Map Task 1</code>中所有的<code>hello</code>会被输出到<code>mr-out-1-5</code>这个中间文件, <code>1</code>代表<code>Map Task</code>序号, <code>5</code>代表被哈希值取模的结果。那么，<code>Map Task 2</code>中所有的<code>hello</code>会被输出到<code>mr-out-2-5</code>这个中间文件。那么<code>Reduce Task 5</code>读取的就是形如<code>mr-out-*-5</code>这样的文件。</p></li></ol><h1 id="3-设计与实现"><a href="#3-设计与实现" class="headerlink" title="3 设计与实现"></a>3 设计与实现</h1><h2 id="3-1-RPC设计"><a href="#3-1-RPC设计" class="headerlink" title="3.1 RPC设计"></a>3.1 <code>RPC</code>设计</h2><h3 id="3-1-1-消息类型"><a href="#3-1-1-消息类型" class="headerlink" title="3.1.1. 消息类型"></a>3.1.1. 消息类型</h3><p>,通信时首先需要确定这个消息是什么类型, 通过前述分析可知, 通信的信息类型包括: </p><ul><li><code>Worker</code>请求任务</li><li><code>Coordinator</code>分配<code>Reduce</code>或<code>Map</code>任务</li><li><code>Worker</code>报告<code>Reduce</code>或<code>Map</code>任务的执行情况(成功或失败)</li><li><code>Coordinator</code>告知<code>Worker</code>休眠（暂时没有任务需要执行）</li><li><code>Coordinator</code>告知<code>Worker</code>退出（所有任务执行成功）</li></ul><p>每一种消息类型会需要附带额外的信息, 例如<code>Coordinator</code>分配任务需要告知任务的ID, <code>Map</code>任务还需要告知<code>NReduce</code>,和输入文件名。<br>综上考虑, 消息类型的定义如下(<code>Send</code>和<code>Reply</code>是从<code>Worker</code>视角出发的):</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    AskForTask      MsgType = <span class="literal">iota</span> <span class="comment">// `Worker`请求任务</span></span><br><span class="line">    MapTaskAlloc                   <span class="comment">// `Coordinator`分配`Map`任务</span></span><br><span class="line">    ReduceTaskAlloc                <span class="comment">// `Coordinator`分配`Reduce`任务</span></span><br><span class="line">    MapSuccess                     <span class="comment">// `Worker`报告`Map`任务的执行成功</span></span><br><span class="line">    MapFailed                      <span class="comment">// `Worker`报告`Map`任务的执行失败</span></span><br><span class="line">    ReduceSuccess                  <span class="comment">// `Worker`报告`Reduce`任务的执行成功</span></span><br><span class="line">    ReduceFailed                   <span class="comment">//`Worker`报告`Reduce`任务的执行失败</span></span><br><span class="line">    Shutdown                       <span class="comment">// `Coordinator`告知`Worker`退出（所有任务执行成功）</span></span><br><span class="line">    Wait                           <span class="comment">//`Coordinator`告知`Worker`休眠（暂时没有任务需要执行）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MessageSend <span class="keyword">struct</span> &#123;</span><br><span class="line">    MsgType MsgType</span><br><span class="line">    TaskID  <span class="type">int</span> <span class="comment">// `Worker`回复的消息类型如MapSuccess等需要使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MessageReply <span class="keyword">struct</span> &#123;</span><br><span class="line">    MsgType  MsgType</span><br><span class="line">    NReduce  <span class="type">int</span>    <span class="comment">// MapTaskAlloc需要告诉Map Task 切分的数量</span></span><br><span class="line">    TaskID   <span class="type">int</span>    <span class="comment">// 任务Id用于选取输入文件</span></span><br><span class="line">    TaskName <span class="type">string</span> <span class="comment">// MapSuccess专用: 告知输入.txt文件的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-通信函数设计"><a href="#3-1-2-通信函数设计" class="headerlink" title="3.1.2 通信函数设计"></a>3.1.2 通信函数设计</h3><p>在我的设计中，<code>Worker</code>只需要有2个动作: </p><ul><li>向<code>Coordinator</code>请求<code>Task</code></li><li>向<code>Coordinator</code>报告之前的<code>Task</code>的执行情况</li></ul><p>因此, <code>worker.go</code>中通信函数应该是下面的样子:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CallForReportStatus</span><span class="params">(succesType MsgType, taskID <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 报告Task执行情况</span></span><br><span class="line">    <span class="comment">// declare an argument structure.</span></span><br><span class="line">    args := MessageSend&#123;</span><br><span class="line">        MsgType: succesType,</span><br><span class="line">        TaskID:  taskID,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    err := call(<span class="string">&quot;Coordinator.NoticeResult&quot;</span>, &amp;args, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CallForTask</span><span class="params">()</span></span> *MessageReply &#123;</span><br><span class="line">    <span class="comment">// 请求一个Task</span></span><br><span class="line">    <span class="comment">// declare an argument structure.</span></span><br><span class="line">    args := MessageSend&#123;</span><br><span class="line">        MsgType: AskForTask,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// declare a reply structure.</span></span><br><span class="line">    reply := MessageReply&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// send the RPC request, wait for the reply.</span></span><br><span class="line">    err := call(<span class="string">&quot;Coordinator.AskForTask&quot;</span>, &amp;args, &amp;reply)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// fmt.Printf(&quot;TaskName %v, NReduce %v, taskID %v\n&quot;, reply.TaskName, reply.NReduce, reply.TaskID)</span></span><br><span class="line">        <span class="keyword">return</span> &amp;reply</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// log.Println(err.Error())</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>coordinator.go</code>有相应的处理函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> AskForTask(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> NoticeResult(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这些处理函数则需要进一步的设计。</p><h2 id="3-2-Worker设计"><a href="#3-2-Worker设计" class="headerlink" title="3.2 Worker设计"></a>3.2 <code>Worker</code>设计</h2><h3 id="3-2-1-Worker主函数设计"><a href="#3-2-1-Worker主函数设计" class="headerlink" title="3.2.1 Worker主函数设计"></a>3.2.1 <code>Worker</code>主函数设计</h3><p>由之前的分析可以看出，<code>Woker</code>所做的内容就是不断的请求任务、执行任务和回复任务执行情况，因此，可以很容易地写出<code>Worker</code>函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main/mrworker.go calls this function.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue,</span><br><span class="line">reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your worker implementation here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 循环请求</span></span><br><span class="line">replyMsg := CallForTask()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> replyMsg.MsgType &#123;</span><br><span class="line"><span class="keyword">case</span> MapTaskAlloc:</span><br><span class="line">err := HandleMapTask(replyMsg, mapf)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">_ = CallForReportStatus(MapSuccess, replyMsg.TaskID)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// log.Println(&quot;Worker: Map Task failed&quot;)</span></span><br><span class="line">_ = CallForReportStatus(MapFailed, replyMsg.TaskID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> ReduceTaskAlloc:</span><br><span class="line">err := HandleReduceTask(replyMsg, reducef)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">_ = CallForReportStatus(ReduceSuccess, replyMsg.TaskID)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// log.Println(&quot;Worker: Map Task failed&quot;)</span></span><br><span class="line">_ = CallForReportStatus(ReduceFailed, replyMsg.TaskID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> Wait:</span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line"><span class="keyword">case</span> Shutdown:</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-Map-Task执行函数"><a href="#3-2-2-Map-Task执行函数" class="headerlink" title="3.2.2 Map Task执行函数"></a>3.2.2 <code>Map Task</code>执行函数</h3><p><code>HandleMapTask</code>函数是执行具体的<code>MapTask</code>, 这样部分很简单, 可以从<code>mrsequential.go</code>中偷代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleMapTask</span><span class="params">(reply *MessageReply, mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue) <span class="type">error</span> &#123;</span><br><span class="line">file, err := os.Open(reply.TaskName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">content, err := io.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行mapf</span></span><br><span class="line">kva := mapf(reply.TaskName, <span class="type">string</span>(content))</span><br><span class="line">sort.Sort(ByKey(kva))</span><br><span class="line"></span><br><span class="line">oname_prefix := <span class="string">&quot;mr-out-&quot;</span> + strconv.Itoa(reply.TaskID) + <span class="string">&quot;-&quot;</span></span><br><span class="line"></span><br><span class="line">key_group := <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kva &#123;</span><br><span class="line">key_group[kv.Key] = <span class="built_in">append</span>(key_group[kv.Key], kv.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先清理可能存在的垃圾</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 原子重命名的方法</span></span><br><span class="line">_ = DelFileByMapId(reply.TaskID, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, values := <span class="keyword">range</span> key_group &#123;</span><br><span class="line">redId := ihash(key)</span><br><span class="line">oname := oname_prefix + strconv.Itoa(redId%reply.NReduce)</span><br><span class="line"><span class="keyword">var</span> ofile *os.File</span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(oname); os.IsNotExist(err) &#123;</span><br><span class="line"><span class="comment">// 文件夹不存在</span></span><br><span class="line">ofile, _ = os.Create(oname)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ofile, _ = os.OpenFile(oname, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">&#125;</span><br><span class="line">enc := json.NewEncoder(ofile)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> values &#123;</span><br><span class="line">err := enc.Encode(&amp;KeyValue&#123;Key: key, Value: value&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ofile.Close()</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ofile.Close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然偷了很多代码, 但是有家店需要注意, 因为之前的<code>Worker</code>可能写入了一部分数据到中间文件后失败的情况, 之后<code>Coordinator</code>重新分配任务时, 文件是可能存在脏数据的, 因此需要先执行清理:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = DelFileByMapId(reply.TaskID, <span class="string">&quot;./&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DelFileByMapId</span><span class="params">(targetNumber <span class="type">int</span>, path <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 创建正则表达式，X 是可变的指定数字</span></span><br><span class="line">pattern := fmt.Sprintf(<span class="string">`^mr-out-%d-\d+$`</span>, targetNumber)</span><br><span class="line">regex, err := regexp.Compile(pattern)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取当前目录中的文件</span></span><br><span class="line">files, err := os.ReadDir(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历文件，查找匹配的文件</span></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line"><span class="keyword">if</span> file.IsDir() &#123;</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// 跳过目录</span></span><br><span class="line">&#125;</span><br><span class="line">fileName := file.Name()</span><br><span class="line"><span class="keyword">if</span> regex.MatchString(fileName) &#123;</span><br><span class="line"><span class="comment">// 匹配到了文件，删除它</span></span><br><span class="line">filePath := filepath.Join(path, file.Name())</span><br><span class="line">err := os.Remove(filePath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DelFileByMapId</code>函数删除特定<code>Map Task</code>的输出文件, 但这样的执行存在一定隐患:</p><ul><li>首先是<code>Coordinator</code>只能重新分配一个<code>Worker</code>执行<code>Coordinator</code>认为死掉的任务, 这一点可以通过加锁和记录时间戳完成, 后续会讲到</li><li>其次, 如果之前死掉的<code>Worker</code>又活了,其可能和现在的<code>Worker</code>的输出又有交叉了</li></ul><p>因此, 目前的实现是存在一定漏洞的, 有以下的改进方案:</p><ol><li>参考官方的提示, 先为当前的中间文件使用临时名, 完成操作后再进行原子重命名</li><li>通过加文件锁的方式保护文件</li></ol><blockquote><p>Ps: 后续有时间再改代码吧</p></blockquote><h3 id="3-2-3-Reduce-Task执行函数"><a href="#3-2-3-Reduce-Task执行函数" class="headerlink" title="3.2.3 Reduce Task执行函数"></a>3.2.3 <code>Reduce Task</code>执行函数</h3><p><code>Reduce Task</code>手机对应序号的中间文件, 汇总后应用指定的<code>reduce函数</code>,实现也比较简单:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleReduceTask</span><span class="params">(reply *MessageReply, reducef <span class="keyword">func</span>(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">key_id := reply.TaskID</span><br><span class="line"></span><br><span class="line">k_vs := <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">fileList, err := ReadSpecificFile(key_id, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整理所有的中间文件</span></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> fileList &#123;</span><br><span class="line">dec := json.NewDecoder(file)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> kv KeyValue</span><br><span class="line"><span class="keyword">if</span> err := dec.Decode(&amp;kv); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">k_vs[kv.Key] = <span class="built_in">append</span>(k_vs[kv.Key], kv.Value)</span><br><span class="line">&#125;</span><br><span class="line">file.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有的键并排序</span></span><br><span class="line"><span class="keyword">var</span> keys []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> k_vs &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line">oname := <span class="string">&quot;mr-out-&quot;</span> + strconv.Itoa(reply.TaskID)</span><br><span class="line">ofile, err := os.Create(oname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ofile.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">output := reducef(key, k_vs[key])</span><br><span class="line">_, err := fmt.Fprintf(ofile, <span class="string">&quot;%v %v\n&quot;</span>, key, output)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DelFileByReduceId(reply.TaskID, <span class="string">&quot;./&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是, 我收集文件内容是使用了<code>map</code>, 而迭代<code>map</code>时, <code>key</code>的顺序是随机的, 因此需要先进行对<code>key</code>排序的操作:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有的键并排序</span></span><br><span class="line"><span class="keyword">var</span> keys []<span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> k_vs &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br></pre></td></tr></table></figure><blockquote><p>其实这里也存在漏洞:同样就是死了的<code>Worker</code>突然复活了怎么办的问题，相比<code>Map Task</code>来说, 这里虽然相对不容易出错, 因为这里对多个中间文件只存在读取而不存在写入, 将内容读取到内存中不会有冲突的。出错只可能在将数据在写入到指定的文件时, <code>os.Create(oname)</code>也会存在竞争条件：因为网络等问题，<code>Coordinator</code>启动了多个<code>Worker</code>, 多个<code>Worker</code>同时运行，并且都尝试创建同一个文件名<code>oname</code>, 假设一个Worker先创建了oname并写入了一部分数据，当另一个Worker再次调用os.Create(oname)时，之前的数据将会被清空。这意味着第一个Worker在接下来的写操作中不会出现错误，但它写入的部分数据会丢失，因为第二个Worker已经截断了文件。</p></blockquote><p>因此, 目前的实现是也存在一定漏洞的, 有以下的改进方案:</p><ol><li>参考官方的提示, 先为当前的中间文件使用临时名, 完成操作后再进行原子重命名</li><li>通过加文件锁的方式保护文件</li></ol><h2 id="3-3-Coordinator设计"><a href="#3-3-Coordinator设计" class="headerlink" title="3.3 Coordinator设计"></a>3.3 <code>Coordinator</code>设计</h2><h3 id="3-3-1-TaskInfo设计"><a href="#3-3-1-TaskInfo设计" class="headerlink" title="3.3.1 TaskInfo设计"></a>3.3.1 <code>TaskInfo</code>设计</h3><p>首先需要考虑的是, 如何维护<code>Task</code>的执行信息, <code>Task</code>执行状态包括了: 未执行、执行者、执行失败、执行完成。<br>这里有一个很重要的问题需要考虑， 超时的任务时什么状态呢？因为在我的设计中，<code>Coordinator</code>与<code>Worker</code>是通过<code>RPC</code>来驱动彼此运行的, 当然你也可以启动一个<code>goroutine</code>间隔地检查是否超时, 但为了使设计更简单, 我们可以这样设计检查超时的方案:</p><ol><li>为每个<code>Worker</code>分配<code>Task</code>时需要记录<code>Task</code>被分配的时间戳, 并将其状态置为<code>running</code></li><li>为每个<code>Worker</code>分配<code>Task</code>, 遍历存储<code>TaskInfo</code>的数据结构, 检查每一个状态为<code>running</code>的<code>Task</code>的时间戳是否与当前时间戳差距大于<code>10s</code>, 如果是, 则代表这个<code>Task</code>超时了, 立即将它分配给当前请求的<code>Worker</code>, 并更新其时间戳</li><li>如果导致<code>Task</code>超时的老旧的<code>Woker</code>之后又完成了, 结果也就是这个<code>Task</code>返回了多次执行成功的报告而已, 可忽略</li></ol><blockquote><p>PS: <code>Worker</code>执行失败有2种, 一种是<code>Worker</code>没有崩溃但发现了<code>error</code>, 这时<code>Worker</code>会将错误报告给<code>Coordinator</code>, <code>Coordinator</code>会将其状态设置为<code>failed</code>, 另一种情况是<code>Worker</code>崩溃了, 连通知都做不到, 这就以超时体现出来, 处理好超时即可</p></blockquote><p>因此, 我如下设计<code>TaskInfo</code>的数据结构:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> taskStatus <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Task 状态</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">idle     taskStatus = <span class="literal">iota</span> <span class="comment">// 闲置未分配</span></span><br><span class="line">running                    <span class="comment">// 正在运行</span></span><br><span class="line">finished                   <span class="comment">// 完成</span></span><br><span class="line">failed                     <span class="comment">//失败</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map Task 执行状态</span></span><br><span class="line"><span class="keyword">type</span> MapTaskInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">TaskId    <span class="type">int</span>        <span class="comment">// Task 序号</span></span><br><span class="line">Status    taskStatus <span class="comment">// 执行状态</span></span><br><span class="line">StartTime <span class="type">int64</span>      <span class="comment">// 开始执行时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reduce Task 执行状态</span></span><br><span class="line"><span class="keyword">type</span> ReduceTaskInfo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ReduceTask的 序号 由数组下标决定, 不进行额外存储</span></span><br><span class="line">Status    taskStatus <span class="comment">// 执行状态</span></span><br><span class="line">StartTime <span class="type">int64</span>      <span class="comment">// 开始执行时间戳</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your definitions here.</span></span><br><span class="line">NReduce     <span class="type">int</span>                     <span class="comment">// the number of reduce tasks to use.</span></span><br><span class="line">MapTasks    <span class="keyword">map</span>[<span class="type">string</span>]*MapTaskInfo <span class="comment">//MapTaskInfo</span></span><br><span class="line">mu          sync.Mutex              <span class="comment">// 一把大锁保平安</span></span><br><span class="line">ReduceTasks []*ReduceTaskInfo       <span class="comment">// ReduceTaskInfo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>TaskInfo</code>的初始化方法, 并在<code>MakeCoordinator</code>中调用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> initTask(files []<span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> idx, fileName := <span class="keyword">range</span> files &#123;</span><br><span class="line">c.MapTasks[fileName] = &amp;MapTaskInfo&#123;</span><br><span class="line">TaskId: idx,</span><br><span class="line">Status: idle,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> idx := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line">c.ReduceTasks[idx] = &amp;ReduceTaskInfo&#123;</span><br><span class="line">Status: idle,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MakeCoordinator</span><span class="params">(files []<span class="type">string</span>, nReduce <span class="type">int</span>)</span></span> *Coordinator &#123;</span><br><span class="line">c := Coordinator&#123;</span><br><span class="line">NReduce:     nReduce,</span><br><span class="line">MapTasks:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*MapTaskInfo),</span><br><span class="line">ReduceTasks: <span class="built_in">make</span>([]*ReduceTaskInfo, nReduce),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="comment">// 由于每一个文件名就是一个map task ,需要初始化任务状态</span></span><br><span class="line">c.initTask(files)</span><br><span class="line"></span><br><span class="line">c.server()</span><br><span class="line"><span class="keyword">return</span> &amp;c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-RPC-响应函数-AskForTask"><a href="#3-3-2-RPC-响应函数-AskForTask" class="headerlink" title="3.3.2 RPC 响应函数-AskForTask"></a>3.3.2 <code>RPC</code> 响应函数-<code>AskForTask</code></h3><p>这部分算是较为复杂的, 其逻辑如下:</p><ol><li>如果有闲置的任务(<code>idle</code>)和之前执行失败(<code>failed</code>)的<code>Map Task</code>, 选择这个任务进行分配</li><li>如果检查到有超时的任务<code>Map Task</code>, 选择这个任务进行分配</li><li>如果以上的<code>Map Task</code>均不存在, 但<code>Map Task</code>又没有全部执行完成, 告知<code>Worker</code>先等待</li><li><code>Map Task</code>全部执行完成的情况下, 按照<code>1</code>和<code>2</code>相同的逻辑进行<code>Reduce Task</code>的分配</li><li>所有的<code>Task</code>都执行完成了, 告知<code>Worker</code>退出</li></ol><p>因此, <code>AskForTask</code>代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> AskForTask(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> req.MsgType != AskForTask &#123;</span><br><span class="line"><span class="keyword">return</span> BadMsgType</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 选择一个任务返回给worker</span></span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"></span><br><span class="line">count_map_success := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fileName, taskinfo := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line"><span class="comment">// 选择闲置或者失败的任务</span></span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_map_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 将未分配的任务和已经失败的任务分配给这个worker</span></span><br><span class="line">reply.MsgType = MapTaskAlloc</span><br><span class="line">reply.TaskName = fileName</span><br><span class="line">reply.NReduce = c.NReduce</span><br><span class="line">reply.TaskID = taskinfo.TaskId</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Map Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改状态信息</span></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_map_success &lt; <span class="built_in">len</span>(c.MapTasks) &#123;</span><br><span class="line"><span class="comment">// map任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count_reduce_success := <span class="number">0</span></span><br><span class="line"><span class="comment">// 运行到这里说明map任务都已经完成</span></span><br><span class="line"><span class="keyword">for</span> idx, taskinfo := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_reduce_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 分配给其一个Reduce任务</span></span><br><span class="line">reply.MsgType = ReduceTaskAlloc</span><br><span class="line">reply.TaskID = idx</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Reduce Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_reduce_success &lt; <span class="built_in">len</span>(c.ReduceTasks) &#123;</span><br><span class="line"><span class="comment">// reduce任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行到这里说明所有任务都已经完成</span></span><br><span class="line">reply.MsgType = Shutdown</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这里, 我对数据的保护是一把大锁保平安, 这其实可以优化的</p></blockquote><h3 id="3-3-3-RPC-响应函数-NoticeResult"><a href="#3-3-3-RPC-响应函数-NoticeResult" class="headerlink" title="3.3.3 RPC 响应函数-NoticeResult"></a>3.3.3 <code>RPC</code> 响应函数-<code>NoticeResult</code></h3><p>这个函数就简单很多了, 只需要改变对应<code>TaskInfo</code>的状态即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> NoticeResult(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> req.MsgType == MapSuccess &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> v.TaskId == req.TaskID &#123;</span><br><span class="line">v.Status = finished</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: map task%v finished\n&quot;, v.TaskId)</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.MsgType == ReduceSuccess &#123;</span><br><span class="line">c.ReduceTasks[req.TaskID].Status = finished</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: reduce task%v finished\n&quot;, req.TaskID)</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.MsgType == MapFailed &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> v.TaskId == req.TaskID &#123;</span><br><span class="line">v.Status = failed</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: map task%v failed\n&quot;, v.TaskId)</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.MsgType == ReduceFailed &#123;</span><br><span class="line">c.ReduceTasks[req.TaskID].Status = failed</span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: reduce task%v failed\n&quot;, req.TaskID)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-Done方法"><a href="#3-3-4-Done方法" class="headerlink" title="3.3.4 Done方法"></a>3.3.4 <code>Done</code>方法</h3><p><code>Done</code>方法是最简单的, 遍历<code>TaskInfo</code>的数据结构, 如果全部完成则返回<code>True</code>, </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> Done() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">// Your code here.</span></span><br><span class="line"><span class="comment">// 先确认mapTask完成</span></span><br><span class="line"><span class="keyword">for</span> _, taskinfo := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line"><span class="keyword">if</span> taskinfo.Status != finished &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&quot;Coordinator: All map task finished&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再确认Reduce Task 完成</span></span><br><span class="line"><span class="keyword">for</span> _, taskinfo := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line"><span class="keyword">if</span> taskinfo.Status != finished &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&quot;Coordinator: All reduce task finished&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// time.Sleep(time.Second * 5)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个小细节, <code>time.Sleep(time.Second * 5)</code>是为了让<code>Coordinator</code>延迟关闭, 这样可以留出时间告知<code>Worker</code>退出, 也可以直接注释掉它, 让测试跑得更快</p><h1 id="4-测试和优化"><a href="#4-测试和优化" class="headerlink" title="4 测试和优化"></a>4 测试和优化</h1><h2 id="4-1-原实现测试"><a href="#4-1-原实现测试" class="headerlink" title="4.1 原实现测试"></a>4.1 原实现测试</h2><p>运行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time bash test-mr.sh</span><br></pre></td></tr></table></figure><p>结果如下图, 耗时3m3s</p><p><img src="/../../images/MapReduce-Test.png" alt="MapReduce-Test"></p><h2 id="4-2-优化"><a href="#4-2-优化" class="headerlink" title="4.2 优化"></a>4.2 优化</h2><h3 id="4-2-1-原子重命名"><a href="#4-2-1-原子重命名" class="headerlink" title="4.2.1 原子重命名"></a>4.2.1 原子重命名</h3><p>按照官方提示, 使用原子重命名避免竞争, 修改<code>HandleMapTask</code>函数:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleMapTask</span><span class="params">(reply *MessageReply, mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue) <span class="type">error</span> &#123;</span><br><span class="line">file, err := os.Open(reply.TaskName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">content, err := io.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kva := mapf(reply.TaskName, <span class="type">string</span>(content))</span><br><span class="line">sort.Sort(ByKey(kva))</span><br><span class="line"></span><br><span class="line">tempFiles := <span class="built_in">make</span>([]*os.File, reply.NReduce)</span><br><span class="line">encoders := <span class="built_in">make</span>([]*json.Encoder, reply.NReduce)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kva &#123;</span><br><span class="line">redId := ihash(kv.Key) % reply.NReduce</span><br><span class="line"><span class="keyword">if</span> encoders[redId] == <span class="literal">nil</span> &#123;</span><br><span class="line">tempFile, err := ioutil.TempFile(<span class="string">&quot;&quot;</span>, fmt.Sprintf(<span class="string">&quot;mr-map-tmp-%d&quot;</span>, redId))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> tempFile.Close()</span><br><span class="line">tempFiles[redId] = tempFile</span><br><span class="line">encoders[redId] = json.NewEncoder(tempFile)</span><br><span class="line">&#125;</span><br><span class="line">err := encoders[redId].Encode(&amp;kv)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, file := <span class="keyword">range</span> tempFiles &#123;</span><br><span class="line"><span class="keyword">if</span> file != <span class="literal">nil</span> &#123;</span><br><span class="line">fileName := file.Name()</span><br><span class="line">file.Close()</span><br><span class="line">newName := fmt.Sprintf(<span class="string">&quot;mr-out-%d-%d&quot;</span>, reply.TaskID, i)</span><br><span class="line"><span class="keyword">if</span> err := os.Rename(fileName, newName); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time bash test-mr.sh</span><br></pre></td></tr></table></figure><p>结果如下图, 耗时2m52s, 原子重命名节省了原实现中的清理耗费的时间, 节约了差不多10s的样子</p><p><img src="/../../images/MapReduce-Test-2.png" alt="MapReduce-Test-2"></p><h3 id="4-2-2-锁细化"><a href="#4-2-2-锁细化" class="headerlink" title="4.2.2 锁细化"></a>4.2.2 锁细化</h3><p>我们可以发现, 在<code>Worker</code>请求任务时, <code>Map Task</code>是需要先全部执行成功的, 因此我们可以增加一个字段记录<code>Map Task</code>是否全部完成, 同时为<code>MapTaskInfo</code>和<code>ReduceTaskInfo</code>分别实现设计一个锁来取代原来的大锁, 代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Your definitions here.</span></span><br><span class="line">NReduce       <span class="type">int</span>                     <span class="comment">// the number of reduce tasks to use.</span></span><br><span class="line">MapTasks      <span class="keyword">map</span>[<span class="type">string</span>]*MapTaskInfo <span class="comment">//MapTaskInfo</span></span><br><span class="line">MapSuccess    <span class="type">bool</span>                    <span class="comment">// Map Task 是否全部完成</span></span><br><span class="line">muMap         sync.Mutex              <span class="comment">// Map 锁, 保护 MapTasks</span></span><br><span class="line">ReduceTasks   []*ReduceTaskInfo       <span class="comment">// ReduceTaskInfo</span></span><br><span class="line">ReduceSuccess <span class="type">bool</span>                    <span class="comment">// Reduce Task 是否全部完成</span></span><br><span class="line">muReduce      sync.Mutex              <span class="comment">// Reduce 锁, 保护 ReduceTasks</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> AskForTask(req *MessageSend, reply *MessageReply) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> req.MsgType != AskForTask &#123;</span><br><span class="line"><span class="keyword">return</span> BadMsgType</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !c.MapSuccess &#123;</span><br><span class="line"><span class="comment">// 选择一个 Map Task 返回给worker</span></span><br><span class="line"></span><br><span class="line">c.muMap.Lock()</span><br><span class="line"></span><br><span class="line">count_map_success := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fileName, taskinfo := <span class="keyword">range</span> c.MapTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line"><span class="comment">// 选择闲置或者失败的任务</span></span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_map_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 将未分配的任务和已经失败的任务分配给这个worker</span></span><br><span class="line">reply.MsgType = MapTaskAlloc</span><br><span class="line">reply.TaskName = fileName</span><br><span class="line">reply.NReduce = c.NReduce</span><br><span class="line">reply.TaskID = taskinfo.TaskId</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Map Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改状态信息</span></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line">c.muMap.Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.muMap.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_map_success &lt; <span class="built_in">len</span>(c.MapTasks) &#123;</span><br><span class="line"><span class="comment">// map任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.MapSuccess = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !c.ReduceSuccess &#123;</span><br><span class="line"><span class="comment">// 选择一个 Reduce Task 返回给worker</span></span><br><span class="line">c.muReduce.Lock()</span><br><span class="line"></span><br><span class="line">count_reduce_success := <span class="number">0</span></span><br><span class="line"><span class="comment">// 运行到这里说明map任务都已经完成</span></span><br><span class="line"><span class="keyword">for</span> idx, taskinfo := <span class="keyword">range</span> c.ReduceTasks &#123;</span><br><span class="line">alloc := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> taskinfo.Status == idle || taskinfo.Status == failed &#123;</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> taskinfo.Status == running &#123;</span><br><span class="line"><span class="comment">// 判断其是否超时, 超时则重新派发</span></span><br><span class="line">curTime := time.Now().Unix()</span><br><span class="line"><span class="keyword">if</span> curTime-taskinfo.StartTime &gt; <span class="number">10</span> &#123;</span><br><span class="line">taskinfo.StartTime = curTime</span><br><span class="line">alloc = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count_reduce_success++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alloc &#123;</span><br><span class="line"><span class="comment">// 分配给其一个Reduce任务</span></span><br><span class="line">reply.MsgType = ReduceTaskAlloc</span><br><span class="line">reply.TaskID = idx</span><br><span class="line"></span><br><span class="line"><span class="comment">// log.Printf(&quot;coordinator: apply Reduce Task: taskID = %v\n&quot;, reply.TaskID)</span></span><br><span class="line"></span><br><span class="line">taskinfo.Status = running</span><br><span class="line">taskinfo.StartTime = time.Now().Unix()</span><br><span class="line"></span><br><span class="line">c.muReduce.Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.muReduce.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> count_reduce_success &lt; <span class="built_in">len</span>(c.ReduceTasks) &#123;</span><br><span class="line"><span class="comment">// reduce任务没有可以分配的, 但都还未完成</span></span><br><span class="line">reply.MsgType = Wait</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.ReduceSuccess = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行到这里说明所有任务都已经完成</span></span><br><span class="line">reply.MsgType = Shutdown</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ time bash test-mr.sh</span><br></pre></td></tr></table></figure><p>结果如下图, 耗时2m39s, 原子重命名节省了原实现中的清理耗费的时间, 又节约了差不多13s的样子<br>另外别忘了<code>NoticeResult</code>也要相应地修改, 由于比较简单就不列出来了, 可以直接看仓库代码。</p><p><img src="/../../images/MapReduce-Test-3.png" alt="MapReduce-Test-3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-实验介绍&quot;&gt;&lt;a href=&quot;#1-实验介绍&quot; class=&quot;headerlink&quot; title=&quot;1 实验介绍&quot;&gt;&lt;/a&gt;1 实验介绍&lt;/h1&gt;&lt;p&gt;本次实验是实现一个简易版本的&lt;code&gt;MapReduce&lt;/code&gt;编程框架,官方文档在这里:&lt;a hr</summary>
      
    
    
    
    <category term="CS课程笔记" scheme="http://example.com/categories/CS%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MIT6.5840(6.824) 2023" scheme="http://example.com/categories/CS%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/MIT6-5840-6-824-2023/"/>
    
    
    <category term="分布式系统" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Go" scheme="http://example.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.S081 0: 环境配置</title>
    <link href="http://example.com/2023/12/19/MIT6.S081/0%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/12/19/MIT6.S081/0%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-12-19T13:56:47.000Z</published>
    <updated>2023-12-23T18:04:11.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-课程简介"><a href="#1-课程简介" class="headerlink" title="1 课程简介"></a>1 课程简介</h1><p>MIT6.S081 Operating System Engineering 是麻省理工学院的 <code>PDOS</code> 实验室开设的面向MIT本科生的操作系统课程, 课程前身为MIT6.828。课程主题是介绍 <code>基于 RISCV 架构实现的类Unix OS xv6</code>, 基本上每一部分的内容都有对应的<code>xv6 lab</code>, 涉及页表、中断、内存管理、线程调度、锁、文件系统等OS的基本内容。课程附有专门的教材介绍<code>xv6</code>的设计架构, 并结合了与通用操作系统的比较和相应前沿技术的简单介绍。</p><h1 id="2-资源汇总"><a href="#2-资源汇总" class="headerlink" title="2 资源汇总"></a>2 资源汇总</h1><ol><li>课程官网：<br>2020秋： <a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html">https://pdos.csail.mit.edu/6.828/2020/schedule.html</a><br>2021秋： <a href="https://pdos.csail.mit.edu/6.828/2021/schedule.html">https://pdos.csail.mit.edu/6.828/2021/schedule.html</a></li><li>中文参考文献<br>课程内容翻译（2020秋）： <a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/">https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/</a><br>xv6中文文档（版本较旧）： <a href="https://th0ar.gitbooks.io/xv6-chinese/content/index.html">https://th0ar.gitbooks.io/xv6-chinese/content/index.html</a></li><li>教材、lab指导书、视频、ppt等资源<br>见官网</li></ol><h1 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3 环境配置"></a>3 环境配置</h1><p>官网的环境配置参考为： <a href="https://pdos.csail.mit.edu/6.828/2020/tools.html">https://pdos.csail.mit.edu/6.828/2020/tools.html</a><br>我的方案是在 <code>Windows11 wsl2</code> 中进行环境配置</p><h2 id="3-1-wsl2安装Ubuntu22-04"><a href="#3-1-wsl2安装Ubuntu22-04" class="headerlink" title="3.1 wsl2安装Ubuntu22.04"></a>3.1 wsl2安装Ubuntu22.04</h2><p>wsl2的安装参考 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/">微软官方文档</a></p><h3 id="3-1-1-启用Linux子系统功能"><a href="#3-1-1-启用Linux子系统功能" class="headerlink" title="3.1.1 启用Linux子系统功能"></a>3.1.1 启用Linux子系统功能</h3><p>系统搜索<strong>启用或关闭Windows功能</strong>，如下图开启功能<br><img src="/../../images/enable_win_func.png" alt="en../imagesble_win_func"></p><h3 id="3-1-2-BIOS开启CPU虚拟化功能"><a href="#3-1-2-BIOS开启CPU虚拟化功能" class="headerlink" title="3.1.2 BIOS开启CPU虚拟化功能"></a>3.1.2 BIOS开启CPU虚拟化功能</h3><p>不同的主板厂商BIOS界面设置不同，大体上的位置可参考下图<br><img src="/../../images/enable-virtualization.png" alt="enable-virtualization"></p><h3 id="3-1-3-安装wsl2"><a href="#3-1-3-安装wsl2" class="headerlink" title="3.1.3 安装wsl2"></a>3.1.3 安装wsl2</h3><p>最好以管理员模式打开powershell，输入如下命令进行安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> wsl <span class="literal">-l</span> <span class="literal">-o</span></span><br><span class="line"><span class="comment"># 改命令会搜索可在线安装的发行版</span></span><br></pre></td></tr></table></figure><p>默认安装Ubuntu20.04</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure><p>或安装指定版本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p>如果使用了<a href="https://learn.microsoft.com/zh-cn/windows/terminal/install">Windows Terminal</a>，其选项卡中会自动添加安装的Linux发行版<br>也可以使用powershell进入虚拟机：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">-d</span> Ubuntu</span><br></pre></td></tr></table></figure><h3 id="3-1-4-Ubuntu换源"><a href="#3-1-4-Ubuntu换源" class="headerlink" title="3.1.4 Ubuntu换源"></a>3.1.4 Ubuntu换源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>将其替换为如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt <span class="keyword">update</span> 速度，如有需要可自行取消注释</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># <span class="keyword">deb</span> https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-proposed main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src https://mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ jammy-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="3-2-安装riscv交叉编译工具和qemu"><a href="#3-2-安装riscv交叉编译工具和qemu" class="headerlink" title="3.2 安装riscv交叉编译工具和qemu"></a>3.2 安装riscv交叉编译工具和qemu</h2><h3 id="3-2-1-安装riscv交叉编译工具"><a href="#3-2-1-安装riscv交叉编译工具" class="headerlink" title="3.2.1 安装riscv交叉编译工具"></a>3.2.1 安装riscv交叉编译工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu </span><br></pre></td></tr></table></figure><h3 id="3-2-2-编译安装qemu"><a href="#3-2-2-编译安装qemu" class="headerlink" title="3.2.2 编译安装qemu"></a>3.2.2 编译安装qemu</h3><p>官网指定版本为qemu-5.1.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> qemu-5.1.0</span><br><span class="line">$ ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=<span class="string">&quot;riscv64-softmmu&quot;</span></span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">$ qemu-system-riscv64 --version</span><br><span class="line"><span class="comment"># 成功则输出如下内容</span></span><br><span class="line">QEMU emulator version 5.1.0</span><br><span class="line">Copyright (c) 2003-2020 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><h2 id="3-3-安装gdb"><a href="#3-3-安装gdb" class="headerlink" title="3.3 安装gdb"></a>3.3 安装gdb</h2><p>按照指导书进行环境配置对于基础的代码运行是没有问题，但我发现自己按照指导书操作后无法进行<code>gdb</code>调试, 经过总结后在此处给出我的2种解决方案:</p><h3 id="方案1-安装完整的-riscv-gnu-toolchain"><a href="#方案1-安装完整的-riscv-gnu-toolchain" class="headerlink" title="方案1: 安装完整的 riscv-gnu-toolchain"></a>方案1: 安装完整的 <code>riscv-gnu-toolchain</code></h3><p>安装完整的<code>riscv-gnu-toolchain</code>流程如下, 次方法费时较长, 且占据空间较大, 更推荐第二种方法。</p><ol><li>安装依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev</span><br></pre></td></tr></table></figure></li><li>克隆<code>riscv-gnu-toolchain</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive https://github.com/riscv/riscv-gnu-toolchain</span><br></pre></td></tr></table></figure></li><li>编译安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> riscv-gnu-toolchain</span><br><span class="line">$ ./configure --prefix=/usr/local</span><br><span class="line">$ sudo make</span><br></pre></td></tr></table></figure></li></ol><h3 id="方案2-编译安装-riscv64-unknown-elf-gdb"><a href="#方案2-编译安装-riscv64-unknown-elf-gdb" class="headerlink" title="方案2: 编译安装 riscv64-unknown-elf-gdb"></a>方案2: 编译安装 <code>riscv64-unknown-elf-gdb</code></h3><ol><li>安装依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libncurses5-dev python2 python2-dev texinfo libreadline-dev</span><br></pre></td></tr></table></figure></li><li>下载<code>gdb</code>源码<br>此处我选择gdb-13.1, 该版本在<code>wsl2 Ubuntu22.04</code>上使用正常。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐清华源下载</span></span><br><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/gdb-13.1.tar.xz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar -xvf gdb-13.1.tar.x</span><br></pre></td></tr></table></figure></li><li>编译安装<br>只需要指定编译安装<code>riscv64-unknown-elf</code>并配置相关参数。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gdb-13.1</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">$ ../configure --prefix=/your_path --target=riscv64-unknown-elf --enable-tui=<span class="built_in">yes</span></span><br><span class="line">$ make -j$(<span class="built_in">nproc</span>)</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4 测试"></a>4 测试</h1><h2 id="4-1-克隆仓库"><a href="#4-1-克隆仓库" class="headerlink" title="4.1 克隆仓库"></a>4.1 克隆仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2020</span><br><span class="line">$ <span class="built_in">cd</span> xv6-labs-2020</span><br><span class="line">$ git checkout util</span><br></pre></td></tr></table></figure><h2 id="4-2-第一次运行前设置gdbinit"><a href="#4-2-第一次运行前设置gdbinit" class="headerlink" title="4.2 第一次运行前设置gdbinit"></a>4.2 第一次运行前设置<code>gdbinit</code></h2><p>&#x2F;.gdbinit 是 GNU 调试器（GDB）的一个配置文件，它位于用户的主目录中。当 GDB 启动时，它会自动读取这个文件（如果存在的话），并执行文件中的命令。这允许用户自定义 GDB 的启动行为，包括设置断点、定义宏、修改显示格式等。</p><p>在 ~&#x2F;.gdbinit 文件中，用户可以编写 GDB 命令脚本，这些脚本在每次启动 GDB 时自动执行。这可以极大地提高调试效率，尤其是对于那些需要频繁调试并希望每次调试会话都有一组固定设置的用户来说。</p><p>按照指导, 我们如下进行设置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="built_in">set</span> auto-load safe-path / &gt;&gt; ~/.gdbinit</span></span><br></pre></td></tr></table></figure><h2 id="4-3-启动qemu调试"><a href="#4-3-启动qemu调试" class="headerlink" title="4.3 启动qemu调试"></a>4.3 启动qemu调试</h2><p>在一个终端的xv6仓库下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make qemu-gdb</span><br></pre></td></tr></table></figure><p>在另一个终端的xv6仓库下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ riscv64-unknown-elf-gdb</span><br></pre></td></tr></table></figure><p>结果如图所示<br><img src="/../../images/gdb-qemu.png" alt="gdb-qemu"></p><p>进行断点调试, 例如指定函数<code>uvmalloc</code>断点:<br><img src="/../../images/gdb-uvmalloc.png" alt="gdb-uvmalloc"></p><p>可以看出, 运行<code>ls</code>程序后, 程序停留在了<code>uvmalloc</code>函数的入口处, 证明了gdb调试功能正常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-课程简介&quot;&gt;&lt;a href=&quot;#1-课程简介&quot; class=&quot;headerlink&quot; title=&quot;1 课程简介&quot;&gt;&lt;/a&gt;1 课程简介&lt;/h1&gt;&lt;p&gt;MIT6.S081 Operating System Engineering 是麻省理工学院的 &lt;code&gt;</summary>
      
    
    
    
    <category term="CS课程笔记" scheme="http://example.com/categories/CS%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MIT6.S081" scheme="http://example.com/categories/CS%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/MIT6-S081/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
  </entry>
  
  <entry>
    <title>2023开源操作系统训练营三阶段 proj2 练习3</title>
    <link href="http://example.com/2023/12/15/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%B8%89/%E9%98%B6%E6%AE%B53-proj2%E7%BB%83%E4%B9%A03/"/>
    <id>http://example.com/2023/12/15/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%B8%89/%E9%98%B6%E6%AE%B53-proj2%E7%BB%83%E4%B9%A03/</id>
    <published>2023-12-15T12:42:15.000Z</published>
    <updated>2023-12-23T18:05:10.875Z</updated>
    
    <content type="html"><![CDATA[<p><strong>练习实验书</strong>: <a href="https://scpointer.github.io/rcore2oscomp/docs/lab3/intro.html">https://scpointer.github.io/rcore2oscomp/docs/lab3/intro.html</a></p><h1 id="1-编程作业"><a href="#1-编程作业" class="headerlink" title="1 编程作业"></a>1 编程作业</h1><h2 id="1-1-实验3-1"><a href="#1-1-实验3-1" class="headerlink" title="1.1 实验3.1"></a>1.1 实验3.1</h2><blockquote><p>修改代码，使得 busybox ls bin&#x2F;abc 正常输出 bin&#x2F;abc。</p></blockquote><h3 id="1-1-1-对拍结果"><a href="#1-1-1-对拍结果" class="headerlink" title="1.1.1 对拍结果"></a>1.1.1 对拍结果</h3><ul><li>在<code>syscall</code>中使用<code>error!</code>输出日志后运行结果如下:  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">==================================================== busybox <span class="built_in">touch</span> abc ====================================================</span><br><span class="line"></span><br><span class="line">[ 60.140455 0:6 syscall_entry::syscall:38] [syscall] <span class="built_in">id</span> = SET_TID_ADDRESS, args = [1457172, 248, 0, 18446744073708088664, 1, 1], entry</span><br><span class="line">[ 60.172291 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 96, args = [1457172, 248, 0, 18446744073708088664, 1, 1], <span class="built_in">return</span> 6</span><br><span class="line">[ 60.195900 0:6 syscall_entry::syscall:38] [syscall] <span class="built_in">id</span> = GETUID, args = [1073741394, 47, 1073741394, 98, 1073741394, 1073741394], entry</span><br><span class="line">[ 60.221776 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 174, args = [1073741394, 47, 1073741394, 98, 1073741394, 1073741394], <span class="built_in">return</span> 0</span><br><span class="line">[ 60.239349 0:6 syscall_entry::syscall:29] [syscall] <span class="built_in">id</span> = UTIMENSAT, args = [18446744073709551516, 1073741384, 0, 0, 0, 0], entry</span><br><span class="line">[ 62.010726 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 88, args = [18446744073709551516, 1073741384, 0, 0, 0, 0], <span class="built_in">return</span> 0</span><br><span class="line">[ 62.028929 0:6 syscall_entry::syscall:38] [syscall] <span class="built_in">id</span> = EXIT_GROUP, args = [0, 0, 0, 0, 0, 0], entry</span><br><span class="line"></span><br><span class="line">==================================================== busybox <span class="built_in">mv</span> abc bin/ ====================================================</span><br><span class="line"></span><br><span class="line">[ 80.708070 0:6 syscall_entry::syscall:38] [syscall] <span class="built_in">id</span> = SET_TID_ADDRESS, args = [1457172, 248, 0, 18446744073708088664, 1, 1], entry</span><br><span class="line">[ 80.723000 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 96, args = [1457172, 248, 0, 18446744073708088664, 1, 1], <span class="built_in">return</span> 6</span><br><span class="line">[ 80.743645 0:6 syscall_entry::syscall:38] [syscall] <span class="built_in">id</span> = GETUID, args = [1073741394, 47, 1073741394, 98, 1073741394, 1073741394], entry</span><br><span class="line">[ 80.754384 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 174, args = [1073741394, 47, 1073741394, 98, 1073741394, 1073741394], <span class="built_in">return</span> 0</span><br><span class="line">[ 80.775450 0:6 syscall_entry::syscall:29] [syscall] <span class="built_in">id</span> = FSTATAT, args = [18446744073709551516, 1073741382, 1073740160, 0, 1073741382, 18446744073709551516], entry</span><br><span class="line">[ 80.806092 0:6 fatfs::<span class="built_in">dir</span>:140] Is a directory</span><br><span class="line">[ 80.834425 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 79, args = [18446744073709551516, 1073741382, 1073740160, 0, 1073741382, 18446744073709551516], <span class="built_in">return</span> 0</span><br><span class="line">[ 80.856809 0:6 syscall_entry::syscall:21] [syscall] <span class="built_in">id</span> = BRK, args = [0, 64, 1458528, 0, 1457024, 4096], entry</span><br><span class="line">[ 80.865595 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 214, args = [0, 64, 1458528, 0, 1457024, 4096], <span class="built_in">return</span> 1067450368</span><br><span class="line">[ 80.876861 0:6 syscall_entry::syscall:21] [syscall] <span class="built_in">id</span> = MMAP, args = [0, 4096, 3, 34, 18446744073709551615, 0], entry</span><br><span class="line">[ 80.893941 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 222, args = [0, 4096, 3, 34, 18446744073709551615, 0], <span class="built_in">return</span> 4096</span><br><span class="line">[ 80.917225 0:6 syscall_entry::syscall:29] [syscall] <span class="built_in">id</span> = FSTATAT, args = [18446744073709551516, 4128, 1073740160, 0, 4128, 18446744073709551516], entry</span><br><span class="line">[ 81.021491 0:6 syscall_entry::syscall:47] [syscall] <span class="built_in">id</span> = 79, args = [18446744073709551516, 4128, 1073740160, 0, 4128, 18446744073709551516], <span class="built_in">return</span> -64</span><br><span class="line">[ 81.042344 0:6 syscall_entry::syscall:29] [syscall] <span class="built_in">id</span> = WRITE, args = [2, 1073740112, 47, 0, 0, 0], entry</span><br><span class="line"><span class="built_in">mv</span>: can<span class="string">&#x27;t stat &#x27;</span>bin/abc<span class="string">&#x27;: No error information</span></span><br><span class="line"><span class="string">[ 81.059920 0:6 syscall_entry::syscall:47] [syscall] id = 64, args = [2, 1073740112, 47, 0, 0, 0], return 47</span></span><br><span class="line"><span class="string">[ 81.072551 0:6 syscall_entry::syscall:38] [syscall] id = EXIT_GROUP, args = [1, 0, 0, 1459576, 0, 1], entry</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">==================================================== busybox ls bin/abc ====================================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[ 99.668975 0:6 syscall_entry::syscall:38] [syscall] id = SET_TID_ADDRESS, args = [1457172, 248, 0, 18446744073708088664, 1, 1], entry</span></span><br><span class="line"><span class="string">[ 99.684396 0:6 syscall_entry::syscall:47] [syscall] id = 96, args = [1457172, 248, 0, 18446744073708088664, 1, 1], return 6</span></span><br><span class="line"><span class="string">[ 99.703854 0:6 syscall_entry::syscall:38] [syscall] id = GETUID, args = [1073741394, 47, 1073741394, 98, 1073741394, 1073741394], entry</span></span><br><span class="line"><span class="string">[ 99.720334 0:6 syscall_entry::syscall:47] [syscall] id = 174, args = [1073741394, 47, 1073741394, 98, 1073741394, 1073741394], return 0</span></span><br><span class="line"><span class="string">[ 99.743118 0:6 syscall_entry::syscall:38] [syscall] id = CLOCK_GET_TIME, args = [0, 1073740640, 24, 24, 1457480, 0], entry</span></span><br><span class="line"><span class="string">[ 99.756191 0:6 syscall_entry::syscall:47] [syscall] id = 113, args = [0, 1073740640, 24, 24, 1457480, 0], return 0</span></span><br><span class="line"><span class="string">[ 99.773509 0:6 syscall_entry::syscall:29] [syscall] id = IOCTL, args = [0, 21523, 1073740584, 18446744073709551578, 1457480, 1073740528], entry</span></span><br><span class="line"><span class="string">[ 99.792659 0:6 syscall_entry::syscall:47] [syscall] id = 29, args = [0, 21523, 1073740584, 18446744073709551578, 1457480, 1073740528], return 0</span></span><br><span class="line"><span class="string">[ 99.815217 0:6 syscall_entry::syscall:29] [syscall] id = IOCTL, args = [1, 21523, 1073740648, 2, 0, 1332386], entry</span></span><br><span class="line"><span class="string">[ 99.824071 0:6 syscall_entry::syscall:47] [syscall] id = 29, args = [1, 21523, 1073740648, 2, 0, 1332386], return 0</span></span><br><span class="line"><span class="string">[ 99.836051 0:6 syscall_entry::syscall:29] [syscall] id = IOCTL, args = [1, 21523, 1073740648, 68, 2, 0], entry</span></span><br><span class="line"><span class="string">[ 99.849454 0:6 syscall_entry::syscall:47] [syscall] id = 29, args = [1, 21523, 1073740648, 68, 2, 0], return 0</span></span><br><span class="line"><span class="string">[ 99.863974 0:6 syscall_entry::syscall:21] [syscall] id = BRK, args = [0, 160, 1458528, 0, 1457024, 4096], entry</span></span><br><span class="line"><span class="string">[ 99.879705 0:6 syscall_entry::syscall:47] [syscall] id = 214, args = [0, 160, 1458528, 0, 1457024, 4096], return 1067450368</span></span><br><span class="line"><span class="string">[ 99.895548 0:6 syscall_entry::syscall:21] [syscall] id = MMAP, args = [0, 4096, 3, 34, 18446744073709551615, 0], entry</span></span><br><span class="line"><span class="string">[ 99.903246 0:6 syscall_entry::syscall:47] [syscall] id = 222, args = [0, 4096, 3, 34, 18446744073709551615, 0], return 4096</span></span><br><span class="line"><span class="string">[ 99.919318 0:6 syscall_entry::syscall:29] [syscall] id = FSTATAT, args = [18446744073709551516, 1073741383, 1073740256, 0, 1073741383, 18446744073709551516], entry</span></span><br><span class="line"><span class="string">[100.011304 0:6 syscall_entry::syscall:47] [syscall] id = 79, args = [18446744073709551516, 1073741383, 1073740256, 0, 1073741383, 18446744073709551516], return -64</span></span><br><span class="line"><span class="string">[100.042643 0:6 syscall_entry::syscall:29] [syscall] id = WRITE, args = [2, 1073740208, 34, 0, 0, 0], entry</span></span><br><span class="line"><span class="string">ls: bin/abc: No error information</span></span><br><span class="line"><span class="string">[100.070083 0:6 syscall_entry::syscall:47] [syscall] id = 64, args = [2, 1073740208, 34, 0, 0, 0], return 34</span></span><br><span class="line"><span class="string">[100.090969 0:6 syscall_entry::syscall:38] [syscall] id = EXIT_GROUP, args = [1, 0, 0, 1459576, 0, 1], entry</span></span><br></pre></td></tr></table></figure></li><li>在<code>Linux</code>系统中在相同的位置执行相同的命令, <code>strace</code>输出如下(这里只给出<code>mv abc bin/</code>的结果):  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ioctl(0, TCGETS, &#123;B38400 opost isig icanon <span class="built_in">echo</span> ...&#125;) = 0</span><br><span class="line"><span class="built_in">stat</span>(<span class="string">&quot;bin/&quot;</span>, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line">lstat(<span class="string">&quot;abc&quot;</span>, &#123;st_mode=S_IFREG|0644, st_size=0, ...&#125;) = 0</span><br><span class="line">lstat(<span class="string">&quot;bin/abc&quot;</span>, 0x7fffbdb041a0)        = -1 ENOENT (No such file or directory)</span><br><span class="line">rename(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;bin/abc&quot;</span>)                = 0</span><br><span class="line">lseek(0, 0, SEEK_CUR)                   = -1 ESPIPE (Illegal seek)</span><br><span class="line">close(0)                                = 0</span><br><span class="line">close(1)                                = 0</span><br><span class="line">close(2)                                = 0</span><br><span class="line">exit_group(0)                           = ?</span><br><span class="line">+++ exited with 0 +++</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-2-定位并修改错误—未完成rename系统调用"><a href="#1-1-2-定位并修改错误—未完成rename系统调用" class="headerlink" title="1.1.2 定位并修改错误—未完成rename系统调用"></a>1.1.2 定位并修改错误—未完成<code>rename</code>系统调用</h3><p><code>strace</code>输出的内容很多, 这里我们只需要关注<code>rename</code>系统调用前后的内容即可, 其区别总结如下:</p><ol><li><code>strace</code>输出内容包括<code>rename</code>系统调用, 而我们的<code>Starry</code>没有输出响应的系统调用<br> 这意味着执行<code>rename</code>系统调用前发生了错误, 因此关注前一个系统调用<code>lstat</code></li><li><code>FSTATAT</code>返回类型不匹配<br>分析可知, <code>lstat</code>和<code>FSTATAT</code>应该是<code>rename</code>系统调用的前置, <code>strace</code>中其返回值为<code>-1 ENOENT</code>, 而在<code>Starry</code>中返回值为<code>-64</code><br>查阅<code>ulib/axstarry/syscall_utils/src/lib.rs</code>和<code>target/debug/build/axerrno-011bdf3cce8cadef/out/linux_errno.rs</code>可知, <code>-64</code>返回的是: <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// target/debug/build/axerrno-011bdf3cce8cadef/out/linux_errno.rs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Machine is not on the network</span></span><br><span class="line">ENONET = <span class="number">64</span>,</span><br></pre></td></tr></table></figure><code>ENOENT</code>在同目录下, 同样存在: <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// target/debug/build/axerrno-011bdf3cce8cadef/out/linux_errno.rs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// No such file or directory</span></span><br><span class="line">ENOENT = <span class="number">2</span>,</span><br></pre></td></tr></table></figure>分析我们执行的指令可知, <code>FSTATAT</code>对应的系统调用<code>syscall_fstatat</code>作用是查看目标路径下的文件信息, 在执行该命令前, 其应当是不存在的, 故其应返回<code>ENOENT</code>而不是<code>ENONET</code></li><li>观察<code>syscall_fstatat</code><br>查看<code>syscall_fstatat</code>代码可知, 其对解析出的路径调用<code>get_stat_in_fs</code>完成信息获取</li><li>修改<code>get_stat_in_fs</code><br>由于我们知道其错误返回了<code>ENONET</code>, 故搜索该字段即可迅速定位并完成修改 <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(file) = <span class="title function_ invoke__">new_fd</span>(real_path.<span class="title function_ invoke__">to_string</span>(), <span class="number">0</span>.<span class="title function_ invoke__">into</span>()) &#123;</span><br><span class="line">    <span class="keyword">match</span> file.<span class="title function_ invoke__">get_stat</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(stat) =&gt; <span class="title function_ invoke__">Ok</span>(stat),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">            debug!(<span class="string">&quot;get stat error: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(SyscallError::EINVAL)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(SyscallError::ENOENT) <span class="comment">// 修改为ENOENT</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-1-3-定位并修改错误—完成缺失的rename系统调用"><a href="#1-1-3-定位并修改错误—完成缺失的rename系统调用" class="headerlink" title="1.1.3 定位并修改错误—完成缺失的rename系统调用"></a>1.1.3 定位并修改错误—完成缺失的<code>rename</code>系统调用</h3><p>根据提示完成<code>syscall_renameat2</code>系统调用:</p><ul><li>实现<code>flags</code>结构体<br>在<a href="https://man7.org/linux/man-pages/man2/renameat2.2.html">此处</a>找到对应的276号系统调用说明<br>可知, <code>flags</code>包含了:<code>RENAME_EXCHANGE</code>, <code>RENAME_NOREPLACE</code>和<code>RENAME_WHITEOUT</code>, 故实现如下:  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> bitflags::bitflags;</span><br><span class="line"><span class="built_in">bitflags!</span> &#123;</span><br><span class="line"><span class="comment">/// sys_renameat2 用到的标志位</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">RenameFlags</span>: <span class="type">u32</span> &#123;</span><br><span class="line"><span class="keyword">const</span> NONE = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// LAB3 其他可能的选项都有什么？</span></span><br><span class="line"><span class="comment">// 参考: https://man7.org/linux/man-pages/man2/renameat2.2.html</span></span><br><span class="line"><span class="keyword">const</span> RENAME_EXCHANGE = <span class="number">1</span>; <span class="comment">// 原子交换旧路径和新路径。两个路径名必须存在</span></span><br><span class="line"><span class="keyword">const</span> RENAME_NOREPLACE = <span class="number">2</span>; <span class="comment">// 如果newpath已经存在, 不要覆盖重命名的新路径。</span></span><br><span class="line"><span class="keyword">const</span> RENAME_WHITEOUT  = <span class="number">4</span>; <span class="comment">// 仅适用于覆盖/并集文件系统实现</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现<code>syscall_renameat2</code><br>此处我没有实现<code>RENAME_EXCHANGE</code>和<code>RENAME_WHITEOUT</code>, 只对<code>RENAME_NOREPLACE</code>进行了实现, 其核心就是调用底层的<code>axfs::api::rename</code>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 276</span></span><br><span class="line"><span class="comment">/// 重命名文件或目录</span></span><br><span class="line"><span class="comment">// LAB3 你需要完成这个 syscall</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">syscall_renameat2</span>(</span><br><span class="line">old_dirfd: <span class="type">usize</span>,</span><br><span class="line">old_path: *<span class="keyword">const</span> <span class="type">u8</span>,</span><br><span class="line">new_dirfd: <span class="type">usize</span>,</span><br><span class="line">new_path: *<span class="keyword">const</span> <span class="type">u8</span>,</span><br><span class="line">flags: <span class="type">usize</span>,</span><br><span class="line">) <span class="punctuation">-&gt;</span> SyscallResult &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">old_path</span> = <span class="title function_ invoke__">deal_with_path</span>(old_dirfd, <span class="title function_ invoke__">Some</span>(old_path), <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">new_path</span> = <span class="title function_ invoke__">deal_with_path</span>(new_dirfd, <span class="title function_ invoke__">Some</span>(new_path), <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">proc_path</span> = FilePath::<span class="title function_ invoke__">new</span>(<span class="string">&quot;/proc&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"><span class="keyword">if</span> old_path.<span class="title function_ invoke__">start_with</span>(&amp;proc_path) || new_path.<span class="title function_ invoke__">start_with</span>(&amp;proc_path) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(SyscallError::EPERM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">new_path_str</span> = new_path.<span class="title function_ invoke__">path</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">replace</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(flag) = RenameFlags::<span class="title function_ invoke__">from_bits</span>(flags.<span class="title function_ invoke__">try_into</span>().<span class="title function_ invoke__">unwrap</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> flag.<span class="title function_ invoke__">contains</span>(RenameFlags::RENAME_EXCHANGE) &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;not supported!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> flag.<span class="title function_ invoke__">contains</span>(RenameFlags::RENAME_NOREPLACE) &#123;</span><br><span class="line">        replace = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> flag.<span class="title function_ invoke__">contains</span>(RenameFlags::RENAME_WHITEOUT) &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;not supported!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !<span class="title function_ invoke__">path_exists</span>(old_path_str) &#123;</span><br><span class="line">    error!(<span class="string">&quot;old path not exists:&#123;&#125;&quot;</span>, old_path_str);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(SyscallError::ENOENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !replace &amp;&amp; <span class="title function_ invoke__">path_exists</span>(new_path_str) &#123;</span><br><span class="line">    error!(<span class="string">&quot;new path exists:&#123;&#125;&quot;</span>, new_path_str);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(SyscallError::EEXIST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error!(&quot;old path = &#123;&#125;&quot;, old_path_str);</span></span><br><span class="line"><span class="comment">// error!(&quot;new path = &#123;&#125;&quot;, new_path_str);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">res</span> = axfs::api::<span class="title function_ invoke__">rename</span>(old_path_str, new_path_str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">match</span> res &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(()) =&gt; <span class="title function_ invoke__">Ok</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="title function_ invoke__">Err</span>(e.<span class="title function_ invoke__">into</span>()),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return Err(SyscallError::EPERM);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1-4-输出结果"><a href="#1-1-4-输出结果" class="headerlink" title="1.1.4 输出结果"></a>1.1.4 输出结果</h3><p>输出结果如下:<br>    <img src="/../../../images/lab3_1.png" alt="img"></p><h2 id="1-2-实验3-2"><a href="#1-2-实验3-2" class="headerlink" title="1.2 实验3.2"></a>1.2 实验3.2</h2><blockquote><p>修改代码，使得 busybox mv def bin 正常输出 bin&#x2F;def。</p></blockquote><h3 id="1-2-1-对拍结果"><a href="#1-2-1-对拍结果" class="headerlink" title="1.2.1 对拍结果"></a>1.2.1 对拍结果</h3><p>根据题目分析可知, 此处的错误原因在于内核将<code>bin</code>看成了一个文件, 而不是一个目录<br>因此, 此处对拍可以不用跟<code>strace</code>对比, 其实际输出太过复杂, 可以和我们之前的<code>实验3.1</code>进行对拍</p><blockquote><p>PS:此处借助VScode的比较工具对2次的输出进行比对</p></blockquote><p><img src="/../../../images/3-1%E5%AF%B9%E6%8B%8D3-2.png" alt="实验3.1对拍实验3.2"></p><p>通过<code>VSCode</code>的对比我们可以更快地定位对拍的不同:</p><ul><li>在调用<code>syscall_renameat2</code>之前, 左侧的<code>实验3.1</code>不存在系统调用<code>FACCESSAT</code>, 而右侧的<code>实验3.2</code>则存在</li><li>在调用<code>syscall_renameat2</code>之前的系统调用<code>FSTATAT</code>返回值不同:左侧的<code>实验3.1</code>返回值为<code>-2</code>, 而右侧的<code>实验3.2</code>返回<code>0</code></li></ul><h3 id="1-2-2-对拍分析"><a href="#1-2-2-对拍分析" class="headerlink" title="1.2.2 对拍分析"></a>1.2.2 对拍分析</h3><ol><li><p>对拍分析–<code>FACCESSAT</code><br>查阅<code>syscall_faccessat</code>的注释可知, 该函数用于<code>获取文件权限</code>与判别目录还是文件无关, 可暂时跳过</p></li><li><p>对拍分析–<code>FSTATAT</code><br> 再次回到熟悉的函数<code>syscall_fstatat</code>, 发现其对路径字符串的解析在<code>get_stat_in_fs</code>中<br> 分析<code>get_stat_in_fs</code>, 发现其判断路径为文件夹或文件的依据是:</p> <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> !real_path.<span class="title function_ invoke__">ends_with</span>(<span class="string">&quot;/&quot;</span>) &amp;&amp; !real_path.<span class="title function_ invoke__">ends_with</span>(<span class="string">&quot;include&quot;</span>)</span><br></pre></td></tr></table></figure><p> 大致可以判断出错误原因了, 因为其判断路径是文件夹或者文件的依据是其是否以<code>/</code>结尾, 参考<code>syscall_renameat2</code>中的提示, 使用<code>metadata</code>来判断其是否为文件:</p> <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">is_file</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">meta_data</span> = <span class="title function_ invoke__">metadata</span>(real_path);</span><br><span class="line"><span class="keyword">if</span> meta_data.<span class="title function_ invoke__">is_ok</span>() &#123;</span><br><span class="line">    is_file = meta_data.<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">is_file</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(SyscallError::ENOENT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_file &#123;</span><br><span class="line">    <span class="comment">// 是文件</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 是目录</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2-3-输出结果"><a href="#1-2-3-输出结果" class="headerlink" title="1.2.3 输出结果"></a>1.2.3 输出结果</h3><p>输出结果如下:<br>    <img src="/../../../images/lab3_2.png" alt="img"></p><h1 id="2-问答作业"><a href="#2-问答作业" class="headerlink" title="2 问答作业"></a>2 问答作业</h1><h2 id="2-1-思考题1"><a href="#2-1-思考题1" class="headerlink" title="2.1 思考题1"></a>2.1 思考题1</h2><ul><li>思考题1.1<blockquote><p>思考题1.1：这些代码具体在 ~&#x2F;.cargo 下的哪个文件夹？</p></blockquote></li></ul><p>我的<code>log</code>库的路径为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/log-0.4.19/src/lib.rs</span><br></pre></td></tr></table></figure><p>其中<code>src</code>的下一级目录为设置的镜像代理</p><ul><li>思考题1.2<blockquote><p>思考题1.2：如果忘记 make clean 会发生什么？</p></blockquote></li></ul><p>阅读Makefile:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">clean: clean_c</span></span><br><span class="line">rm -rf <span class="variable">$(APP)</span>/*.bin <span class="variable">$(APP)</span>/*.elf</span><br><span class="line">cargo clean</span><br></pre></td></tr></table></figure><p>可知, <code>make clean</code>进行了<code>cargo clean</code>, 如果直接<code>make run</code>会导致依赖库不会重新下载</p><h2 id="2-3-思考题2"><a href="#2-3-思考题2" class="headerlink" title="2.3 思考题2"></a>2.3 思考题2</h2><blockquote><p>思考题2：在部分往届内核及运行指引 一节提到的内核中挑选一个，描述它在默认情况下启动后会执行哪些测例（抑或是直接启动终端）。你不一定要真的运行那个内核，读文档或搜索即可。</p></blockquote><p>选择内核为<a href="https://github.com/oscomp/2021oscomp-best-kernel-design-impl/tree/2021-xv6">xv6</a>(<del>嘿嘿, 其实是对xv6比较熟悉, 偷个懒</del>)<br><code>xv6</code>运行测例位于<code>xv6-user</code>文件夹下, 并需要再在<code>Makefile</code>中尽显指定:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">UPROGS=\</span><br><span class="line">$U/_init\</span><br><span class="line">$U/_sh\</span><br><span class="line">$U/_cat\</span><br><span class="line">$U/_echo\</span><br><span class="line">$U/_grep\</span><br><span class="line">$U/_ls\</span><br><span class="line">$U/_kill\</span><br><span class="line">$U/_mkdir\</span><br><span class="line">$U/_xargs\</span><br><span class="line">$U/_sleep\</span><br><span class="line">$U/_find\</span><br><span class="line">$U/_rm\</span><br><span class="line">$U/_rmdir\</span><br><span class="line">$U/_wc\</span><br><span class="line">$U/_info\</span><br><span class="line">$U/_usertests\</span><br><span class="line">$U/_strace\</span><br><span class="line">$U/_mv\</span><br><span class="line">$U/_test\</span><br><span class="line">$U/_grind\</span><br><span class="line">$U/_forktest\</span><br><span class="line">$U/_stressfs\</span><br><span class="line">$U/_cowtest\</span><br><span class="line">$U/_lazytests\</span><br><span class="line">$U/_mount\</span><br><span class="line">$U/_umount\</span><br><span class="line">$U/_dup3\</span><br><span class="line">$U/_mmaptests\</span><br><span class="line">$U/_sync\</span><br><span class="line">$U/_signal_test</span><br></pre></td></tr></table></figure><p><code>Makefile</code>以上文件对应于<code>xv6-user</code>文件夹下去掉下划线并以<code>.c</code>结尾的源文件, 如<code>init.c</code>, <code>test.c</code>等</p><h2 id="2-3-思考题3"><a href="#2-3-思考题3" class="headerlink" title="2.3 思考题3"></a>2.3 思考题3</h2><ul><li>思考题3.1<blockquote><p>思考题3.1：为什么要在开头结尾各输出一句，会不会太过重复？（提示：考虑执行出错的情况，或者 sys_exit ）</p></blockquote></li></ul><p>一方面, <code>sys_exit</code>输出一次后就终止了, 另一方面, 收尾各自输出依据可以判断是否出现了<code>panic</code>(<del>不确定是不是这个意思</del>)</p><ul><li>思考题3.2<blockquote><p>思考题3.2：为什么要结尾还要输出一遍 syscall 的完整参数，只输出返回值行不行？（提示：考虑像 sys_yield 这样的 syscall）</p></blockquote></li></ul><p><code>sys_yield</code>这类系统调用让出了CPU, 因此通过打印参数, 可以观测让出CPU期间, 其寄存器有没有被修改, 或是将系统让出CPU的时间进行记录(<del>不确定是不是这个意思</del>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;练习实验书&lt;/strong&gt;: &lt;a href=&quot;https://scpointer.github.io/rcore2oscomp/docs/lab3/intro.html&quot;&gt;https://scpointer.github.io/rcore2oscomp/</summary>
      
    
    
    
    <category term="训练营笔记" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/"/>
    
    <category term="清华大学开源操作系统训练营2023" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A52023/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>2023开源操作系统训练营三阶段 proj2 练习2</title>
    <link href="http://example.com/2023/12/14/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%B8%89/%E9%98%B6%E6%AE%B53-proj2%E7%BB%83%E4%B9%A02/"/>
    <id>http://example.com/2023/12/14/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%B8%89/%E9%98%B6%E6%AE%B53-proj2%E7%BB%83%E4%B9%A02/</id>
    <published>2023-12-14T15:34:29.000Z</published>
    <updated>2023-12-23T18:05:03.197Z</updated>
    
    <content type="html"><![CDATA[<p><strong>练习实验书</strong>: <a href="https://scpointer.github.io/rcore2oscomp/docs/lab2/intro.html">https://scpointer.github.io/rcore2oscomp/docs/lab2/intro.html</a></p><h1 id="1-编程作业"><a href="#1-编程作业" class="headerlink" title="1.编程作业"></a>1.编程作业</h1><h2 id="1-1-跟随文档修改内核"><a href="#1-1-跟随文档修改内核" class="headerlink" title="1.1 跟随文档修改内核"></a>1.1 跟随文档修改内核</h2><p>跟随文档编写代码即可, 其实给出的<code>bootloader</code>已经是被修改成适配<code>rCore</code>的版本了, 不需要进行自己的修改, 此处简单说明文档中没有直接给出的代码修改部分:</p><ul><li>思路<blockquote><p><code>bootloader</code>其实就是我们<code>lab1</code>中修改栈布局的完善版本, 只需要将我们在<code>lab1</code>中自己修改的代码换成对<code>bootloader</code>的函数调用即可</p></blockquote></li><li>具体步骤</li></ul><ol><li>调用<code>ElfLoader::new</code>和<code>init_stack</code>完成栈的内存初始化</li><li>将返回的栈底值填充<code>trap_cx</code>, 注意<code>app_init_context</code>也需要填充</li></ol><h2 id="1-2-添加系统调用使hellostd-正常运行"><a href="#1-2-添加系统调用使hellostd-正常运行" class="headerlink" title="1.2 添加系统调用使hellostd 正常运行"></a>1.2 添加系统调用使<code>hellostd </code>正常运行</h2><h3 id="1-2-1-完成ioctl"><a href="#1-2-1-完成ioctl" class="headerlink" title="1.2.1 完成ioctl"></a>1.2.1 完成ioctl</h3><p>通过文档修改后首先输出的是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unsupported syscall_id: 29</span><br></pre></td></tr></table></figure><p>查阅<a href="https://jborza.com/post/2021-05-11-riscv-linux-syscalls/">此处</a>可知缺少系统调用<code>ioctl</code>的实现</p><ol><li><code>ioctl</code>是什么?<blockquote><p>ioctl（Input&#x2F;Output Control）是一个在Unix和Unix-like系统上的系统调用，用于控制设备的底层参数。它允许用户程序通过文件描述符对设备进行各种控制操作</p></blockquote></li><li>原型和使用方式</li></ol><ul><li>原型  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd, <span class="type">unsigned</span> <span class="type">long</span> request, ...)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fd: 打开的文件描述符，指向需要进行控制的设备。</span></span><br><span class="line"><span class="comment">request: 一个表示控制请求的无符号长整型。这个参数指定了具体的操作，如设置参数、获取状态等。</span></span><br><span class="line"><span class="comment">...: 零个或多个可选的参数，取决于具体的控制请求。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><code>Linux</code>下使用案例:  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">ws</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取终端窗口大小</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">ws</span>;</span></span><br><span class="line"><span class="keyword">if</span> (ioctl(STDOUT_FILENO, TIOCGWINSZ, &amp;ws) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;ioctl(TIOCGWINSZ) error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>实现方式<br>可以看出, <code>rCore</code>并不支持以上类似的功能, 一次该系统调用只需要返回 <code>0</code> 即可</li></ol><h3 id="1-2-2-完成writev"><a href="#1-2-2-完成writev" class="headerlink" title="1.2.2 完成writev"></a>1.2.2 完成writev</h3><p>上一步完成后, 运行输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unsupported syscall_id: 66</span><br></pre></td></tr></table></figure><p>查阅<a href="https://jborza.com/post/2021-05-11-riscv-linux-syscalls/">此处</a>可知缺少系统调用<code>writev</code>的实现</p><ol><li><p><code>writev</code>是什么?<br>如果熟悉<code>Linux</code>系统编程的话对这个系统调用很熟悉, 其被<code>writev</code>函数调用, 起作用就是将多个不连续的缓冲区打包一次进行写入, <code>readv</code>的思路也是一样的。其意义在于减少系统调用的开销。</p></li><li><p>原型和使用方式</p></li></ol><ul><li>原型  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">writev</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcnt)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> &#123;</span></span><br><span class="line"><span class="type">void</span>  *iov_base; <span class="comment">// 缓冲区的起始地址</span></span><br><span class="line"><span class="type">size_t</span> iov_len;  <span class="comment">// 缓冲区的长度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><code>Linux</code>下使用案例  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义两个缓冲区</span></span><br><span class="line"><span class="type">char</span> buffer1[] = <span class="string">&quot;Hello, &quot;</span>;</span><br><span class="line"><span class="type">char</span> buffer2[] = <span class="string">&quot;writev!\n&quot;</span>;</span><br><span class="line"><span class="comment">// 定义iovec结构数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iov</span>[2];</span></span><br><span class="line">iov[<span class="number">0</span>].iov_base = buffer1;</span><br><span class="line">iov[<span class="number">0</span>].iov_len = <span class="built_in">strlen</span>(buffer1);</span><br><span class="line">iov[<span class="number">1</span>].iov_base = buffer2;</span><br><span class="line">iov[<span class="number">1</span>].iov_len = <span class="built_in">strlen</span>(buffer2);</span><br><span class="line"><span class="comment">// 打开文件描述符</span></span><br><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;output.txt&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);</span><br><span class="line"><span class="comment">// 使用writev写入数据</span></span><br><span class="line"><span class="type">ssize_t</span> bytes_written = writev(fd, iov, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>实现方式</li></ol><ul><li>思路<br>由于已经实现了<code>sys_write</code>, 而<code>sys_writev</code>就是将多个缓冲区打包在一起.因此只需要连续调用<code>sys_write</code>即可</li><li>具体步骤<ol><li>循环获取每一个<code>iov</code>的地址, 需要通过<code>translated_refmut</code>转化</li><li>每一个<code>iov</code>地址的第一个参数是缓冲区地址, 第二个参数是缓冲区长度, 同样通过<code>translated_refmut</code>转化</li><li>获取到上2个参数后调用<code>sys_write</code></li><li>若<code>sys_write</code>返回-1, 则直接返回, 否则对<code>sys_write</code>进行累加并在循环结束后返回<blockquote><p>PS<br>此处我的视线是直接操作指针, 但如果后续还需实现更多有关<code>iovec</code>的系统调用时, 最后单独定义一个结构体, 并对该结构体实现相应的读写方法</p></blockquote></li></ol></li></ul><h3 id="1-2-3-实现exit-group"><a href="#1-2-3-实现exit-group" class="headerlink" title="1.2.3 实现exit_group"></a>1.2.3 实现exit_group</h3><p>上一步完成后, 运行输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unsupported syscall_id: 94</span><br></pre></td></tr></table></figure><p>查阅<a href="https://jborza.com/post/2021-05-11-riscv-linux-syscalls/">此处</a>可知缺少系统调用<code>exit_group</code>的实现</p><ol><li><code>exit_group</code>是什么?<br>exit_group 是一个系统调用，它会终止所有线程和进程，并返回一个退出状态。它与 exit 的区别在于它会终止整个进程组，而不仅仅是调用线程或进程。</li><li>原型和使用方式</li></ol><ul><li>原型  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exit_group</span><span class="params">(<span class="type">int</span> status)</span>;</span><br></pre></td></tr></table></figure></li><li>使用方式  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ... 进程的其他工作 ...</span></span><br><span class="line"></span><br><span class="line">    exit_group(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这段代码不会执行，因为 exit_group 已经终止了整个进程</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>实现方式<br>显而易见, 由于<code>rCore</code>不支持进程组, 因此只需要转移给<code>exit</code>即可</li></ol><h3 id="1-2-4-结果"><a href="#1-2-4-结果" class="headerlink" title="1.2.4 结果"></a>1.2.4 结果</h3><p>完成以上修改后, 运行<code>hellostd</code>, 得到如下结果:<br><br><img src="/../../../images/lab1-result.png" alt="img"><br></p><h1 id="2-问答作业"><a href="#2-问答作业" class="headerlink" title="2 问答作业"></a>2 问答作业</h1><ol><li>查询标志位定义。<blockquote><p>标准的 waitpid 调用的结构是 pid_t waitpid(pid_t pid, int *_Nullable wstatus, int options);。其中的 options 参数分别有哪些可能（只要列出不需要解释），用 int 的 32 个 bit 如何表示？</p></blockquote></li></ol><ul><li><strong><code>options</code>包括</strong>:</li><li><code>WNOHANG</code>：如果没有任何子进程终止或停止，<code>waitpid</code> 立即返回而不阻塞。如果指定了这个选项，且子进程的状态没有发生变化，<code>waitpid</code> 返回 0。</li><li><code>WUNTRACED</code>：等待任何已经停止的子进程返回。停止是指子进程收到了一个暂停信号（通常是 <code>SIGSTOP</code>）而进入了停止状态。</li><li><code>WCONTINUED</code>：等待任何已经继续执行的子进程返回。继续执行是指子进程从停止状态转为运行状态。</li><li><code>WSTOPPED</code>：它是一个被废弃的宏，不应该在新的代码中使用。使用 <code>WIFSTOPPED</code> 替代。</li><li><code>WEXITED</code>：如果子进程正常终止，<code>waitpid</code> 返回。可以与 <code>WIFEXITED</code> 结合使用。</li><li><code>WEXITSTATUS</code>：用于获取正常终止的子进程的退出状态，需与 <code>WIFEXITED</code> 结合使用。</li><li><code>WIFEXITED</code>：如果子进程正常终止，返回一个非零值。可以与 <code>WEXITSTATUS</code> 结合使用。</li><li><code>WIFSIGNALED</code>：如果子进程因为信号而终止，返回一个非零值。</li><li><code>WIFSTOPPED</code>：如果子进程当前处于停止状态，返回一个非零值。可以与 <code>WSTOPSIG</code> 结合使用。</li><li><code>WIFCONTINUED</code>：如果子进程继续运行，返回一个非零值。</li><li><code>WSTOPSIG</code>：用于获取导致子进程停止的信号编号，需与 <code>WIFSTOPPED</code> 结合使用。</li></ul><blockquote><p>用 int 的 32 个 bit 如何表示?</p></blockquote><p>由于其对应的整型只有一个位被设置为1, 因此可以通过按位或（<code>|</code>）操作组合</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;练习实验书&lt;/strong&gt;: &lt;a href=&quot;https://scpointer.github.io/rcore2oscomp/docs/lab2/intro.html&quot;&gt;https://scpointer.github.io/rcore2oscomp/</summary>
      
    
    
    
    <category term="训练营笔记" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/"/>
    
    <category term="清华大学开源操作系统训练营2023" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A52023/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>2023开源操作系统训练营三阶段 proj2 练习1</title>
    <link href="http://example.com/2023/12/13/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%B8%89/%E9%98%B6%E6%AE%B53-proj2%E7%BB%83%E4%B9%A01/"/>
    <id>http://example.com/2023/12/13/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%B8%89/%E9%98%B6%E6%AE%B53-proj2%E7%BB%83%E4%B9%A01/</id>
    <published>2023-12-13T04:11:22.000Z</published>
    <updated>2023-12-23T18:04:54.783Z</updated>
    
    <content type="html"><![CDATA[<p><strong>练习实验书</strong>: <a href="https://scpointer.github.io/rcore2oscomp/docs/lab1/intro.html">https://scpointer.github.io/rcore2oscomp/docs/lab1/intro.html</a></p><h1 id="1-编程作业"><a href="#1-编程作业" class="headerlink" title="1.编程作业"></a>1.编程作业</h1><h2 id="1-1-扩展-easy-fs-fuse"><a href="#1-1-扩展-easy-fs-fuse" class="headerlink" title="1.1 扩展 easy-fs-fuse"></a>1.1 扩展 easy-fs-fuse</h2><blockquote><p>跟随前面文档的指引，扩展 easy-fs-fuse，使得它可以生成同时包含 Rust 和 C 用户程序的镜像</p></blockquote><ol><li>修改内核代码<br>此步骤参考任务书</li><li>修改Makefile<br>根据项目文档的说明, 基本上完成了生成同时包含 Rust 和 C 用户程序的镜像的需求, 但<code>Makefile</code>需要进行一定的修改<br>此处我基于<code>ch8</code>的代码进行修改 <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FS_IMG := target/fs.img</span><br><span class="line">...</span><br><span class="line"><span class="section">fs-img: <span class="variable">$(APPS)</span></span></span><br><span class="line">    @make -C ../user build TEST=<span class="variable">$(TEST)</span> CHAPTER=<span class="variable">$(CHAPTER)</span> BASE=<span class="variable">$(BASE)</span></span><br><span class="line">    @make -C ../testcases build</span><br><span class="line">    @rm -f <span class="variable">$(FS_IMG)</span></span><br><span class="line">    @cp ../user/build/elf/* ../testcases/build/</span><br><span class="line">    @cd ../easy-fs-fuse &amp;&amp; cargo run --release -- -s ../testcases/build -o ../os/<span class="variable">$(FS_IMG)</span></span><br></pre></td></tr></table></figure> 主要区别在于, 此次构建<code>fs-img</code>之前需要先编译<code>testcases</code>目录下的c程序, 并将<code>user</code>目录下的<code>elf</code>文件复制到<code>testcases/build/</code>下, 根据<code>testcases/build/</code>生成镜像时需要将任务书中的<code>-t</code>参数替换为<code>-o</code>参数</li><li>结果和测试<br>在<code>os</code>下执行<code>make fs-img CHAPTER=8 BASE=2</code>, 可以生成包含c程序的文件系统镜像。<br>同理，<code>os</code>下执行<code>make run CHAPTER=8 BASE=2</code>后运行<code>42</code>和<code>hello</code>程序:<ul><li><code>42</code>运行结果 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; 42</span><br><span class="line">Shell: Process 2 exited with code 42</span><br></pre></td></tr></table></figure> 可以看出<code>42</code>返回值为42, 这与期望值相符合</li><li><code>hello</code>运行结果 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; hello xwd</span><br><span class="line">Incorrect argc</span><br><span class="line">Shell: Process 2 exited with code 1</span><br><span class="line">&gt;&gt; hello</span><br><span class="line">Incorrect argc</span><br><span class="line">Shell: Process 2 exited with code 1</span><br></pre></td></tr></table></figure> 可以看出, <code>hello</code>程序无论是否添加参数, 都会输出错误信息, 这也是接下来要解决的问题。</li></ul></li></ol><h2 id="1-2-修改os内核支持C程序"><a href="#1-2-修改os内核支持C程序" class="headerlink" title="1.2 修改os内核支持C程序"></a>1.2 修改os内核支持C程序</h2><blockquote><p>在 usershell 里运行了 42 和 hello 两个用户程序。42 的运行结果是符合预期的，但 hello 的结果看起来不太对，你的任务是修改内核，使得 hello 测例给出正常输出（即给出一行以 my name is 开头的输出，且 exit_code为0）。</p></blockquote><ol><li>原因分析<br>阅读原<code>rCore</code><a href="http://learningos.cn/rCore-Tutorial-Guide-2023A/chapter7/2cmdargs-and-redirection.html">文档</a>与本实验<a href="https://scpointer.github.io/rcore2oscomp/docs/lab1/clib.html">文档</a><br>可以看出, 二者的栈分布是不同的, 先看旧的栈内存分布<br><img src="/../../../images/%E6%97%A7%E6%A0%88%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" alt="img"><br><br>可以看到在此栈的内存分布中, 实际的参数放在接近栈底的位置, 其指向的实际参数在靠近栈顶的位置, 并且通过阅读源码<code>process.rs</code>中的<code>exec</code>: <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trap_cx.x[<span class="number">10</span>] = args.<span class="title function_ invoke__">len</span>();</span><br><span class="line">trap_cx.x[<span class="number">11</span>] = argv_base;</span><br></pre></td></tr></table></figure> 可知参数个数<code>argc</code>时通过手动计算<code>args</code>的长度计算得到的, 并没有存储在栈上。<br> 阅读本实验指导书可知，C程序的栈内存分布如下：<br><img src="/../../../images/%E6%96%B0%E6%A0%88%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83.png" alt="img"><br><br>在此栈的内存分布中, 实际的参数放在接近栈顶的位置, 其指向的实际参数在靠近栈底的位置， 并且栈指针指向了<code>argc</code><br>而且由<code>testcases/lib/main.c</code>可知: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __start_main(<span class="type">long</span> *p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> argc = p[<span class="number">0</span>];</span><br><span class="line"><span class="type">char</span> **argv = (<span class="type">void</span> *)(p+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(main(argc, argv));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <code>p</code>是传递的栈指针<code>sp</code>, 因此<code>argc</code>会被置为栈指针当前指向的数据, 而根据前述分析可知, <code>argc</code>是存放于<code>a0</code>寄存器的, 因此后续使用<code>argc</code>时报错, 这是栈分布于C程序标准不一致导致的。</li><li>修改os思路<br>因此，需要将os中初始化栈分布相关的代码进行修改， 使之符合C语言的约定， 实际上我们要修改的代码位于：<code>os/src/task/process.rs</code>中的<code>pub fn exec(self: &amp;Arc&lt;Self&gt;, elf_data: &amp;[u8], args: Vec&lt;String&gt;)</code><br>修改内存分布为上图的形式, 次过程不难, 具体代码实现可参考: <a href="../os/src/task/process.rs#L184">我的实现</a></li><li>小bug修改: 去除文件名<br>观察<code>hello.c</code>源码: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line"><span class="type">char</span> greeting[<span class="number">11</span>] = <span class="string">&quot;my name is &quot;</span>;</span><br><span class="line"><span class="type">char</span> error[<span class="number">15</span>] = <span class="string">&quot;Incorrect argc\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">1</span>) &#123;</span><br><span class="line">    write(<span class="number">1</span>, error, <span class="number">15</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(argv[<span class="number">0</span>][len] != <span class="number">0</span>) &#123;</span><br><span class="line">    len++;</span><br><span class="line">&#125;</span><br><span class="line">write(<span class="number">1</span>, greeting, <span class="number">11</span>);</span><br><span class="line">write(<span class="number">1</span>, argv[<span class="number">0</span>], len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 可知其<code>argv[0]</code>应当为命令行输入的参数, 而非约定中的程序名, 因此需要在系统调用中对<code>args</code>中去除第一个函数名参数:<br> 具体代码实现可参考: <a href="../os/src/syscall/process.rs#L74">我的实现</a></li><li>运行结果<br>再次执行<code>make run CHAPTER=8 BASE=2</code>后运行<code>hello</code>程序 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rust user shell</span><br><span class="line">&gt;&gt; hello xwd</span><br><span class="line">my name is xwdShell: Process 2 exited with code 0</span><br></pre></td></tr></table></figure> <img src="/../../../images/lab1-result.png" alt="结果截图"><br></li></ol><h1 id="2-问答作业"><a href="#2-问答作业" class="headerlink" title="2 问答作业"></a>2 问答作业</h1><ol><li><p>elf 文件和 bin 文件有什么区别？<br><code>elf</code>是包含符号信息的二进制文件, <code>bin</code>文件是剥离了二进制信息的符号文件<br>以下是各个命令的输出</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ file elf/ch6_file0.elf</span><br><span class="line">elf/ch6_file0.elf: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version 1 (SYSV), statically linked, stripped</span><br><span class="line">$ file bin/ch6_file0.bin</span><br><span class="line">bin/ch6_file0.bin: data</span><br></pre></td></tr></table></figure><p> <code>elf</code>文件包含的信息有:</p><ul><li>类型: ELF 64-bit LSB executable</li><li>RISC-V: 表示这是一个 RISC-V 架构的可执行文件。</li><li>RVC: 表示该文件使用了 RISC-V 的压缩指令集。</li><li>double-float ABI: 表示该文件使用了双精度浮点数 ABI（Application Binary Interface）。</li><li>版本 1 (SYSV): 表示该 ELF 文件采用了 SYSV 版本 1 的格式。</li><li>静态链接: 表示该文件是静态链接的，即所有的库和依赖在编译时就被链接进来了。</li><li>stripped: 表示该文件已经被剥离了符号信息。<br> <code>bin</code>文件包含的信息有:</li><li>“data” 表示这是一个二进制数据文件</li></ul><p> 总而言之, <code>elf</code>包含了程序的代码、数据、和用于指示操作系统如何运行程序的元数据, <code>bin</code>是纯二进制格式的文件，不包含元数据</p><p> 因此<code>riscv64-linux-musl-objdump -ld ch6_file0.bin &gt; debug.S</code>命令会报错:<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ riscv64-linux-musl-objdump -ld ch6_file0.bin &gt; debug.S</span><br><span class="line">riscv64-linux-musl-objdump: ch6_file0.bin: file format not recognized</span><br></pre></td></tr></table></figure><br> 而<code>riscv64-linux-musl-objdump -ld ch6_file0.elf &gt; debug.S</code>可以得到反汇编文件<code>debug.S</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;练习实验书&lt;/strong&gt;: &lt;a href=&quot;https://scpointer.github.io/rcore2oscomp/docs/lab1/intro.html&quot;&gt;https://scpointer.github.io/rcore2oscomp/</summary>
      
    
    
    
    <category term="训练营笔记" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/"/>
    
    <category term="清华大学开源操作系统训练营2023" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A52023/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>2023开源操作系统训练营二阶段:rCore chapter3练习</title>
    <link href="http://example.com/2023/12/11/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%BA%8C/%E9%98%B6%E6%AE%B52-rCore-chapter3%E7%BB%83%E4%B9%A0/"/>
    <id>http://example.com/2023/12/11/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6-2023%E7%A7%8B%E5%86%AC%E5%AD%A3%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A5/%E9%98%B6%E6%AE%B5%E4%BA%8C/%E9%98%B6%E6%AE%B52-rCore-chapter3%E7%BB%83%E4%B9%A0/</id>
    <published>2023-12-11T14:54:06.000Z</published>
    <updated>2023-12-23T18:05:42.550Z</updated>
    
    <content type="html"><![CDATA[<p><strong>练习实验书</strong>: <a href="https://learningos.cn/rCore-Tutorial-Guide-2023A/chapter3/5exercise.html">https://learningos.cn/rCore-Tutorial-Guide-2023A/chapter3/5exercise.html</a></p><h1 id="1-实现的功能描述"><a href="#1-实现的功能描述" class="headerlink" title="1 实现的功能描述"></a>1 实现的功能描述</h1><ol><li>在<code>task.rs</code>中的<code>TaskControlBlock</code>结构体增加了<code>sys_call_times</code>数组, 用于记录当前<code>task</code>中各个系统调用的次数</li><li>每次执行系统调用时, 将全局变量<code>TASK_MANAGER</code>中当前任务<code>current_task</code>对应的<code>TaskControlBlock</code>结构体的系统调用记录自增</li><li>为<code>TaskManager</code>实现<code>get_sys_call_times</code>方法, 获取当前任务<code>current_task</code>对应的<code>TaskControlBlock</code>结构体的系统调用数组的拷贝</li><li>完成<code>process.rs</code>的<code>sys_task_info</code>, 调用<code>get_sys_call_times</code>和<code>get_time_ms</code>获取<code>TaskInfo</code>结构体的<code>syscall_times</code>和<code>time</code>部分, <code>status</code>部分设为<code>Running</code></li></ol><h1 id="2-简答作业"><a href="#2-简答作业" class="headerlink" title="2 简答作业"></a>2 简答作业</h1><h2 id="2-1-简答作业第一部分"><a href="#2-1-简答作业第一部分" class="headerlink" title="2.1 简答作业第一部分"></a>2.1 简答作业第一部分</h2><p>正确进入 U 态后，程序的特征还应有：使用 S 态特权指令，访问 S 态寄存器后会报错。 请同学们可以自行测试这些内容 (运行 Rust 三个 bad 测例 (ch2b_bad_*.rs) ， 注意在编译时至少需要指定 LOG&#x3D;ERROR 才能观察到内核的报错信息) ， 描述程序出错行为，同时注意注明你使用的 sbi 及其版本。</p><p>Rustsbi 版本为: 0.2.0-alpha.2</p><p>出现报错: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[kernel] PageFault <span class="keyword">in</span> application, bad addr = 0x0, bad instruction = 0x804003c4, kernel killed it.</span><br><span class="line">[kernel] IllegalInstruction <span class="keyword">in</span> application, kernel killed it.</span><br><span class="line">[kernel] IllegalInstruction <span class="keyword">in</span> application, kernel killed it.</span><br></pre></td></tr></table></figure><p><code>ch2b_bad_address.rs</code> 由于除0错误触发异常退出<br><code>ch2b_bad_instructions.rs</code> 在用户态非法使用指令<code>sret</code><br><code>ch2b_bad_register.rs</code> 在用户态非法使用指令<code>csrr</code></p><h2 id="2-2-简答作业第二部分"><a href="#2-2-简答作业第二部分" class="headerlink" title="2.2 简答作业第二部分"></a>2.2 简答作业第二部分</h2><p>深入理解 trap.S 中两个函数 __alltraps 和 __restore 的作用，并回答如下问题:</p><h3 id="2-2-1-L40：刚进入-restore-时，a0-代表了什么值。请指出-restore-的两种使用情景。"><a href="#2-2-1-L40：刚进入-restore-时，a0-代表了什么值。请指出-restore-的两种使用情景。" class="headerlink" title="2.2.1 L40：刚进入 __restore 时，a0 代表了什么值。请指出 __restore 的两种使用情景。"></a>2.2.1 L40：刚进入 __restore 时，a0 代表了什么值。请指出 __restore 的两种使用情景。</h3><blockquote><ol><li>刚进入 __restore 时，a0 代表了系统调用的第一个参数</li><li>__restore 的作用包括:</li></ol><ul><li>从系统调用和异常返回时, 恢复要返回的用户态的上下文信息</li><li>任务切换时, 恢复要切换的任务的上下文信息</li></ul></blockquote><h3 id="2-2-2-L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。"><a href="#2-2-2-L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。" class="headerlink" title="2.2.2 L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。"></a>2.2.2 L43-L48：这几行汇编代码特殊处理了哪些寄存器？这些寄存器的的值对于进入用户态有何意义？请分别解释。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ld t0, 32*8(sp) <span class="comment"># 内核栈 32*8(sp) 处存储了原 sstatus 寄存器的值, 将其读取到 t0</span></span><br><span class="line">ld t1, 33*8(sp) <span class="comment"># 内核栈 32*8(sp) 处存储了原 sepc 寄存器的值, 将其读取到 t1</span></span><br><span class="line">ld t2, 2*8(sp) <span class="comment"># 内核栈 32*8(sp) 处存储了原 sscratch 寄存器的值, 将其读取到 t2</span></span><br><span class="line">csrw sstatus, t0 <span class="comment"># 将 t0中原 sstatus 寄存器的值读取到 sstatus</span></span><br><span class="line">csrw sepc, t1 <span class="comment"># 将 t0中原 sepc 寄存器的值读取到 sepc</span></span><br><span class="line">csrw sscratch, t2 <span class="comment"># 将 t0中原 sscratch 寄存器的值读取到 sscratch</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-L50-L56：为何跳过了-x2-和-x4？"><a href="#2-2-3-L50-L56：为何跳过了-x2-和-x4？" class="headerlink" title="2.2.3 L50-L56：为何跳过了 x2 和 x4？"></a>2.2.3 L50-L56：为何跳过了 x2 和 x4？</h3><ol><li>跳过<code>x2</code>是因为<code>x2</code>对应的用户栈指针保存到了sscratch寄存器, 不需要从内核栈中进行恢复</li><li>跳过<code>x4</code>是因为并没有使用它, 所以无需恢复</li></ol><h3 id="2-2-4-L60：该指令之后，sp-和-sscratch-中的值分别有什么意义？"><a href="#2-2-4-L60：该指令之后，sp-和-sscratch-中的值分别有什么意义？" class="headerlink" title="2.2.4 L60：该指令之后，sp 和 sscratch 中的值分别有什么意义？"></a>2.2.4 L60：该指令之后，sp 和 sscratch 中的值分别有什么意义？</h3><p><code>sp</code>指向用户栈, <code>sscratch</code>指向内核栈</p><h3 id="2-2-5-restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？"><a href="#2-2-5-restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？" class="headerlink" title="2.2.5 __restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？"></a>2.2.5 __restore：中发生状态切换在哪一条指令？为何该指令执行之后会进入用户态？</h3><p><code>sret</code>后发生了状态切换, 执行该指令后, PC设置为 <code>sepc</code> 寄存器的值。<code>sepc</code> 存储着产生中断或异常前的指令地址，因此这实现了到原始代码的返回。</p><h3 id="2-2-6-L13：该指令之后，sp-和-sscratch-中的值分别有什么意义？"><a href="#2-2-6-L13：该指令之后，sp-和-sscratch-中的值分别有什么意义？" class="headerlink" title="2.2.6 L13：该指令之后，sp 和 sscratch 中的值分别有什么意义？"></a>2.2.6 L13：该指令之后，sp 和 sscratch 中的值分别有什么意义？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrrw sp, sscratch, sp</span><br></pre></td></tr></table></figure><p><code>sp</code>, <code>sscratch</code>寄存器的内容被交换, <code>sp</code>保存了原<code>sscratch</code>中的内核栈指针, <code>sscratch</code>保存了原<code>sp</code>中的用户栈栈指针</p><h3 id="2-2-7-从-U-态进入-S-态是哪一条指令发生的？"><a href="#2-2-7-从-U-态进入-S-态是哪一条指令发生的？" class="headerlink" title="2.2.7 从 U 态进入 S 态是哪一条指令发生的？"></a>2.2.7 从 U 态进入 S 态是哪一条指令发生的？</h3><p><code>ecall</code>指令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;练习实验书&lt;/strong&gt;: &lt;a href=&quot;https://learningos.cn/rCore-Tutorial-Guide-2023A/chapter3/5exercise.html&quot;&gt;https://learningos.cn/rCore-Tu</summary>
      
    
    
    
    <category term="训练营笔记" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/"/>
    
    <category term="清华大学开源操作系统训练营2023" scheme="http://example.com/categories/%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E5%BC%80%E6%BA%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%AD%E7%BB%83%E8%90%A52023/"/>
    
    
    <category term="OS" scheme="http://example.com/tags/OS/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
    <category term="Rust" scheme="http://example.com/tags/Rust/"/>
    
  </entry>
  
</feed>
